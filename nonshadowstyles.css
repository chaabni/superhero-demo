@charset "UTF-8";
/**
 * Returns the luminance of a color (0-255), i.e. the perceived brightness, rather than
 * the absolute mathematical lightness value.
 *
 * "The luminance calculation is a weighted average of the color channels that approximates
 * how humans perceive brightness, while lightness is just an average of the largest and
 * smallest channels without regard to perception."
 *
 * Source: http://en.wikipedia.org/wiki/Luminance_(relative)
 *
 * @group color
 *
 * @param {color} $color - the color whose luminance value to get
 *
 * @return {number} the luminance value of the color, in the range of 0-255
 *
 */
/**
 * Luminance value after which colors will be considered light (i.e. not dark).
 *
 * @group color
 */
/**
 * Checks whether the color is considered dark or light, according to it's luminance and saturation.
 *
 * @group color
 *
 * @param {color} $color - the color to check
 *
 * @return {bool} true if the color is considered dark, false if considered light
 */
/**
 * Get the darkest color (by luminance) from a list of colors.
 *
 * @group color
 *
 * @param {list} $colors - a list of CSS colors
 *
 * @return {color} darkest color (by luminance) from a list of colors
 */
/**
 * Returns a font color with enough contrast for the given background color.
 *
 * @group color
 *
 * @param {color} $bg-color - the background color for which to compute a suitable font color
 * @param {number} $contrast (0.8) - the contrast of the font color compared to the background color
 *
 * @return {color} a suitable font color for the given background color
 */
/**
 * Returns a suitable focus color for the given background color.
 *
 * @group color
 *
 * @param {color} $context ($v-app-background-color) - the background color for which to compute a suitable focus color
 *
 * @return {color} a suitable focus color for the given background color
 */
/**
 * Output the default focus styles (border-color and box-shadow).
 *
 * @group style
 */
/**
 * A static text that is shown under the loading spinned while the client-side
 * engine is being loaded and started. The text must be given in quotes. The
 * text can not be localized currently.
 *
 * @type string, quoted
 */
/**
 * Base line height for all widgets. It must be given a unitless number.
 *
 * @group typography
 * @type number
 */
/**
 * Base font size for the theme. The font size defines the overall sizing of
 * UI components by default. Must be specified in pixels.
 *
 * @group typography
 * @type size (px)
 */
/**
 * Base font weight for plain text.
 * Must be specified as a numeric value: 100, 200, 300 (light), 400 (regular),
 * 500, 600, 700 (bold), 800 or 900.
 *
 * @group typography
 * @type number
 */
/**
 * Base font family for the theme. Can be any valid CSS font stack.
 *
 * @group typography
 * @type list
 */
/**
 * Font size for generic component captions. Can be any valid CSS font-size. A
 * round pixel value is recommended.
 *
 * @group typography
 * @type number
 */
/**
 * Font weight for generic component captions. Can be any valid CSS font-weight.
 *
 * @group typography
 * @type number | identifier
 */
/**
 * Border specification for the components that have a border. The border width
 * must be specified in pixels. For the border color, you can specify any CSS color
 * or one of the v-tint, v-shade, and v-tone keywords.
 *
 * @group style
 * @type list
 */
/**
 * Corner radius for components that have a border. The measure must be specified as a
 * single pixel value (i.e. not as a list of values for each corner).
 *
 * @group style
 * @type size (px)
 */
/**
 * Color gradient style for components that have a gradient. The gradient style may use
 * the following keywords: v-linear and v-linear-reverse. The opacity must be given
 * as percentage between 0% and 100%.
 * 
 * #### Gradient styles
 * 
 *  - __v-linear__ - The start of the gradient is a lighter shade of the base color and the end is a darker shade of the base color. A basic linear gradient.
 *  - __v-linear-reverse__ - Same as v-linear, but the color stops are reversed (darker at the start and lighter at the end)
 *
 * @group style
 * @type list
 */
/**
 * Inset shadow style to define how some components are "raised" from the background.
 * The value follows the syntax of CSS box-shadow, and should be a list of insets.
 * For the bevel color, you can specify any CSS color or one of the v-tint, v-shade,
 * and v-tone keywords.
 *
 * @group style
 * @type list
 */
/**
 * Specifies the "depth" of the bevel shadow, as applied to one of the color keywords for
 * the bevel style. The actual amount of tint, shade, or tone is computed from the depth.
 *
 * @group style
 * @type number (pct)
 */
/**
 * Default shadow style for all components. As with $v-bevel, the value follows the syntax
 * of CSS box-shadow, but without the inset. For the shadow color, you can specify any CSS
 * color or one of the v-tint or v-shade keywords.
 *
 * @group style
 * @type list
 */
/**
 * Specifies the opacity of the shadow, as applied to one of the color keywords for the
 * shadow style. The actual amount of tint or shade is computed from the depth.
 *
 * @group style
 * @type number (pct)
 */
/**
 * The background color is the main control parameter for the Valo theme and
 * it is  used for computing all other colors in the theme. If the color is dark
 * (has low luminance),  * light foreground colors that give high contrast
 * with the background are automatically used.
 *
 * Can be any valid CSS color.
 *
 * @group color
 * @type color
 */
/**
 * Background color of the UI's root element. You can specify the color in
 * any way allowed in CSS. Used as the base for other default colors, such
 * as panel and window content areas.
 *
 * Can be any valid CSS color.
 *
 * @group color
 * @type color
 */
/**
 * Base font color for the theme. Can be any valid CSS color.
 *
 * @group color
 * @type color
 */
/**
 * Color for the field focus indicator. The valo-focus-color() function computes a
 * high-contrast color from the context, which is usually the background color. The color
 * can be any CSS color.
 *
 * @group color
 * @type color
 */
/**
 * Box-shadow specification for the field focus indicator. The space-separated values
 * are the horizontal shadow position in pixels, vertical shadow position in pixels,
 * blur distance in pixels, spread distance in pixels, and the color. The color can be
 * any CSS color. You can only specify the color, in which case defaults for the position
 * are used. rgba() or hsla() can be used to enable transparency.
 *
 * @group style
 * @type list | color
 */
/**
 * Opacity of disabled components, from 0 to 1. Not all components have reduced opacity when disabled, such as Labels.
 *
 * @group style
 * @type number
 */
/**
 * Color for indicating selection in selection components.
 *
 * @group color
 * @type color
 */
/**
 * Color of the component error indicator and other error indications, such as the
 * error style notification.
 *
 * @group color
 * @type color
 */
/**
 * Color of the required indicator in field components.
 *
 * @group color
 * @type color
 */
/**
 * Color used for success states and to indicate safe actions (i.e. actions that
 * will not cause any data loss).
 *
 * @group color
 * @type color
 */
/**
 * Color specifications for $v-border, $v-bevel, and $v-shadow may use, in addition to CSS colors, the following keywords:
 *
 *  - __v-tint__ - Lighter than the background color
 *  - __v-shade__ - Darker than the background color
 *  - __v-tone__ - Adaptive color specification: darker on light background and lighter on dark background. Not usable in $v-shadow.
 *
 *
 *  These keywords can be further adjusted by combining them with a strength multiplier, specified in parenthesis.
 *
 *  Examples:
 *
 *      (v-tint 2)
 *      (v-shade 0.6)
 *      (v-tone 1.1)
 *
 * @group color
 */
/**
 * This is the base size for various layout measures. It is directly used in some
 * measures, such as button height and layout margins, while other measures are
 * derived from it. The value must be specified in pixels, with a suitable range
 * of 18-50.
 *
 * @group layout
 * @type size (px)
 */
/**
 * Scaling factor for tiny sizes. Must be a unitless number.
 *
 * @group layout
 * @type number
 */
/**
 * Scaling factor for small sizes. Must be a unitless number.
 *
 * @group layout
 * @type number
 */
/**
 * Scaling factor for large sizes. Must be a unitless number.
 *
 * @group layout
 * @type number
 */
/**
 * Scaling factor for huge sizes. Must be a unitless number.
 *
 * @group layout
 * @type number
 */
/**
 * Unit size for tiny components. Must be a pixel value.
 *
 * @group layout
 * @type size (px)
 */
/**
 * Unit size for small components. Must be a pixel value.
 *
 * @group layout
 * @type size (px)
 */
/**
 * Unit size for large components. Must be a pixel value.
 *
 * @group layout
 * @type size (px)
 */
/**
 * Unit size for huge components. Must be a pixel value.
 *
 * @group layout
 * @type size (px)
 */
/**
 * The top margin size for all built-in layout components, when the margin is
 * enabled with setMargin(). Can be any valid CSS size.
 *
 * @group layout
 * @type size
 */
/**
 * The right margin size for all built-in layout components, when the margin is
 * enabled with setMargin(). Can be any valid CSS size.
 *
 * @group layout
 * @type size
 */
/**
 * The bottom margin size for all built-in layout components, when the margin is
 * enabled with setMargin(). Can be any valid CSS size.
 *
 * @group layout
 * @type size
 */
/**
 * The left margin size for all built-in layout components, when the margin is
 * enabled with setMargin(). Can be any valid CSS size.
 *
 * @group layout
 * @type size
 */
/**
 * Amount of vertical space when spacing is enabled for a layout with setSpacing().
 * Can be any valid CSS size.
 *
 * @group layout
 * @type size
 */
/**
 * Amount of horizontal space when spacing is enabled for a layout with setSpacing().
 * Can be any valid CSS size.
 *
 * @group layout
 * @type size
 */
/**
 * Tiny font size.
 *
 * @group typography
 * @type size (px)
 */
/**
 * Small font size.
 *
 * @group typography
 * @type size (px)
 */
/**
 * Large font size.
 *
 * @group typography
 * @type size (px)
 */
/**
 * Huge font size.
 *
 * @group typography
 * @type size (px)
 */
/**
 * Default width of certain field components, unless overridden with setWidth().
 *
 * @group layout
 * @type size (px)
 */
/**
 * Specifies whether various CSS animations are used. Not all animations are disabled when
 * set to false, such as the default loading indicator animations.
 *
 * @group optimization
 * @type bool
 */
/**
 * Specifies whether various :hover styles are used for indicating that mouse pointer
 * hovers over an element.
 *
 * @group optimization
 * @type bool
 */
/**
 * List of components to include in the theme compilation. The list can be modified to make
 * the compiled theme smaller by removing unused components from the list.
 *
 * @group optimization
 * @type list
 *
 * @example scss
 * // Remove the Calendar component styles from the output (must be declared after importing Valo)
 * $v-included-components: remove($v-included-components, calendar);
 *
 * @example scss
 * // Only include the Label, Button and Vertical and Horizontal layouts in the compilation
 * $v-included-components: label, button, orderedlayout;
 */
/**
 * List of components whose additional styles should be included in the compilation.
 *
 * @group optimization
 * @type list
 */
/**
 * Checks if a given component is included in the compilation. Used by the collection mixins that
 * include all components (i.e. valo-components).
 *
 * @requires $v-included-components
 *
 * @example scss
 *  @if v-is-included(button) {
 *    // The Button component is included in the compilation
 *  }
 *
 * @param {string} $component-name - the name of the component to check
 * @param {list} $is-included ($v-included-components) - the list of components which is checked
 *
 * @return {bool} true if the component is included in the compilation, false if not
 *
 * @group optimization
 */
/**
 * A flag to note whether relative URL paths are relative to the currently parsed SCSS file or to the compilation root file.
 * The Vaadin compiler parses URL paths differently than the regular Sass compiler (i.e. Vaadin modifies relative url paths).
 * This boolean is used to flag which compiler is used, so that paths are correct for different resources.
 * false == Ruby, true == Vaadin
 *
 * @type bool
 */
/**
 * Checks if a list contains a certain value.
 *
 * @param {list} $list - the list to check
 * @param {value} $var - the value to search for
 * @param {bool} $recursive (false) - should any contained lists be checked for the value
 *
 * @return {bool} true if the value is found from the list, false otherwise
 *
 * @group lists
 */
/**
 * Check whether a list contains nested lists.
 *
 * @param {list} $list - the list to check
 *
 * @return {bool} true of the list contains other nested lists, false otherwise
 *
 * @group lists
 */
/**
 * Get the first color value from a list.
 *
 * @param {list} $list - a list which should contain a color value
 *
 * @return {color} The first color encountered in the list
 *
 * @group lists
 */
/**
 * Get the first number value from a list.
 *
 * @param {list} $list - a list which should contain a number value
 *
 * @return {number} The first number encountered in the list
 *
 * @group lists
 */
/**
 * Get the first string value from a list.
 *
 * @param {list} $list - a list which should contain a string value
 *
 * @return {string} The first string encountered in the list
 *
 * @group lists
 */
/**
 * Get the first contained list from the list passed as the parameter.
 *
 * @param {list} $list - a list which should contain a nested list
 *
 * @return {list} The first list encountered in the list passed as the parameter
 *
 * @group lists
 */
/**
 * Get the first value of a certain type from a list.
 *
 * @param {list} $list - a list which should contain a value of the certain type
 * @param {string} $type - the type of value to search for
 *
 * @return {value} The first item of the certain type encountered in the list
 *
 * @group lists
 */
/**
 * Flatten nested lists to one list, while maintaining the original list separators.
 *
 * @param {list} $list - the list to flatten
 *
 * @return {list} the same list with all nested lists flattened
 *
 * @group lists
 */
/**
 * Cross-browser opacity.
 *
 * @param {number} $value - opacity value from 0 to 1
 * @param {bool} $important (false) - should the property value be declared with !important
 *
 * @group util
 */
/**
 * Cross-browser box-shadow.
 * -webkit-box-shadow is still needed for Android 2.3 and 3.0, as well as iOS 5
 *
 * @param {list} $shadows - Any valid CSS box-shadow value
 *
 * @group util
 */
/**
 * Returns the luminance of a color (0-255), i.e. the perceived brightness, rather than
 * the absolute mathematical lightness value.
 *
 * "The luminance calculation is a weighted average of the color channels that approximates
 * how humans perceive brightness, while lightness is just an average of the largest and
 * smallest channels without regard to perception."
 *
 * Source: http://en.wikipedia.org/wiki/Luminance_(relative)
 *
 * @group color
 *
 * @param {color} $color - the color whose luminance value to get
 *
 * @return {number} the luminance value of the color, in the range of 0-255
 *
 */
/**
 * Luminance value after which colors will be considered light (i.e. not dark).
 *
 * @group color
 */
/**
 * Checks whether the color is considered dark or light, according to it's luminance and saturation.
 *
 * @group color
 *
 * @param {color} $color - the color to check
 *
 * @return {bool} true if the color is considered dark, false if considered light
 */
/**
 * Get the darkest color (by luminance) from a list of colors.
 *
 * @group color
 *
 * @param {list} $colors - a list of CSS colors
 *
 * @return {color} darkest color (by luminance) from a list of colors
 */
/**
 * Returns a font color with enough contrast for the given background color.
 *
 * @group color
 *
 * @param {color} $bg-color - the background color for which to compute a suitable font color
 * @param {number} $contrast (0.8) - the contrast of the font color compared to the background color
 *
 * @return {color} a suitable font color for the given background color
 */
/**
 * Returns a suitable focus color for the given background color.
 *
 * @group color
 *
 * @param {color} $context ($v-app-background-color) - the background color for which to compute a suitable focus color
 *
 * @return {color} a suitable focus color for the given background color
 */
/**
 * Output the default focus styles (border-color and box-shadow).
 *
 * @group style
 */
@-webkit-keyframes valo-animate-in-fade {
  0% {
    opacity: 0; } }
@-moz-keyframes valo-animate-in-fade {
  0% {
    opacity: 0; } }
@keyframes valo-animate-in-fade {
  0% {
    opacity: 0; } }
@-webkit-keyframes valo-animate-out-fade {
  100% {
    opacity: 0; } }
@-moz-keyframes valo-animate-out-fade {
  100% {
    opacity: 0; } }
@keyframes valo-animate-out-fade {
  100% {
    opacity: 0; } }
@-webkit-keyframes valo-animate-in-slide-down {
  0% {
    -webkit-transform: translateY(-100%);
    -moz-transform: translateY(-100%);
    -ms-transform: translateY(-100%);
    -o-transform: translateY(-100%);
    transform: translateY(-100%); } }
@-moz-keyframes valo-animate-in-slide-down {
  0% {
    -webkit-transform: translateY(-100%);
    -moz-transform: translateY(-100%);
    -ms-transform: translateY(-100%);
    -o-transform: translateY(-100%);
    transform: translateY(-100%); } }
@keyframes valo-animate-in-slide-down {
  0% {
    -webkit-transform: translateY(-100%);
    -moz-transform: translateY(-100%);
    -ms-transform: translateY(-100%);
    -o-transform: translateY(-100%);
    transform: translateY(-100%); } }
@-webkit-keyframes valo-animate-in-slide-up {
  0% {
    -webkit-transform: translateY(100%);
    -moz-transform: translateY(100%);
    -ms-transform: translateY(100%);
    -o-transform: translateY(100%);
    transform: translateY(100%); } }
@-moz-keyframes valo-animate-in-slide-up {
  0% {
    -webkit-transform: translateY(100%);
    -moz-transform: translateY(100%);
    -ms-transform: translateY(100%);
    -o-transform: translateY(100%);
    transform: translateY(100%); } }
@keyframes valo-animate-in-slide-up {
  0% {
    -webkit-transform: translateY(100%);
    -moz-transform: translateY(100%);
    -ms-transform: translateY(100%);
    -o-transform: translateY(100%);
    transform: translateY(100%); } }
@-webkit-keyframes valo-animate-in-slide-left {
  0% {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }
@-moz-keyframes valo-animate-in-slide-left {
  0% {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }
@keyframes valo-animate-in-slide-left {
  0% {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }
@-webkit-keyframes valo-animate-in-slide-right {
  0% {
    -webkit-transform: translateX(-100%);
    -moz-transform: translateX(-100%);
    -ms-transform: translateX(-100%);
    -o-transform: translateX(-100%);
    transform: translateX(-100%); } }
@-moz-keyframes valo-animate-in-slide-right {
  0% {
    -webkit-transform: translateX(-100%);
    -moz-transform: translateX(-100%);
    -ms-transform: translateX(-100%);
    -o-transform: translateX(-100%);
    transform: translateX(-100%); } }
@keyframes valo-animate-in-slide-right {
  0% {
    -webkit-transform: translateX(-100%);
    -moz-transform: translateX(-100%);
    -ms-transform: translateX(-100%);
    -o-transform: translateX(-100%);
    transform: translateX(-100%); } }
@-webkit-keyframes valo-animate-out-slide-down {
  100% {
    -webkit-transform: translateY(100%);
    -moz-transform: translateY(100%);
    -ms-transform: translateY(100%);
    -o-transform: translateY(100%);
    transform: translateY(100%); } }
@-moz-keyframes valo-animate-out-slide-down {
  100% {
    -webkit-transform: translateY(100%);
    -moz-transform: translateY(100%);
    -ms-transform: translateY(100%);
    -o-transform: translateY(100%);
    transform: translateY(100%); } }
@keyframes valo-animate-out-slide-down {
  100% {
    -webkit-transform: translateY(100%);
    -moz-transform: translateY(100%);
    -ms-transform: translateY(100%);
    -o-transform: translateY(100%);
    transform: translateY(100%); } }
@-webkit-keyframes valo-animate-out-slide-up {
  100% {
    -webkit-transform: translateY(-100%);
    -moz-transform: translateY(-100%);
    -ms-transform: translateY(-100%);
    -o-transform: translateY(-100%);
    transform: translateY(-100%); } }
@-moz-keyframes valo-animate-out-slide-up {
  100% {
    -webkit-transform: translateY(-100%);
    -moz-transform: translateY(-100%);
    -ms-transform: translateY(-100%);
    -o-transform: translateY(-100%);
    transform: translateY(-100%); } }
@keyframes valo-animate-out-slide-up {
  100% {
    -webkit-transform: translateY(-100%);
    -moz-transform: translateY(-100%);
    -ms-transform: translateY(-100%);
    -o-transform: translateY(-100%);
    transform: translateY(-100%); } }
@-webkit-keyframes valo-animate-out-slide-left {
  100% {
    -webkit-transform: translateX(-100%);
    -moz-transform: translateX(-100%);
    -ms-transform: translateX(-100%);
    -o-transform: translateX(-100%);
    transform: translateX(-100%); } }
@-moz-keyframes valo-animate-out-slide-left {
  100% {
    -webkit-transform: translateX(-100%);
    -moz-transform: translateX(-100%);
    -ms-transform: translateX(-100%);
    -o-transform: translateX(-100%);
    transform: translateX(-100%); } }
@keyframes valo-animate-out-slide-left {
  100% {
    -webkit-transform: translateX(-100%);
    -moz-transform: translateX(-100%);
    -ms-transform: translateX(-100%);
    -o-transform: translateX(-100%);
    transform: translateX(-100%); } }
@-webkit-keyframes valo-animate-out-slide-right {
  100% {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }
@-moz-keyframes valo-animate-out-slide-right {
  100% {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }
@keyframes valo-animate-out-slide-right {
  100% {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }
@-webkit-keyframes valo-overlay-animate-in {
  0% {
    -webkit-transform: translatey(-4px);
    -moz-transform: translatey(-4px);
    -ms-transform: translatey(-4px);
    -o-transform: translatey(-4px);
    transform: translatey(-4px);
    opacity: 0; } }
@-moz-keyframes valo-overlay-animate-in {
  0% {
    -webkit-transform: translatey(-4px);
    -moz-transform: translatey(-4px);
    -ms-transform: translatey(-4px);
    -o-transform: translatey(-4px);
    transform: translatey(-4px);
    opacity: 0; } }
@keyframes valo-overlay-animate-in {
  0% {
    -webkit-transform: translatey(-4px);
    -moz-transform: translatey(-4px);
    -ms-transform: translatey(-4px);
    -o-transform: translatey(-4px);
    transform: translatey(-4px);
    opacity: 0; } }
@-webkit-keyframes valo-animate-out-slide-down-fade {
  100% {
    opacity: 0;
    -webkit-transform: translatey(30%);
    -moz-transform: translatey(30%);
    -ms-transform: translatey(30%);
    -o-transform: translatey(30%);
    transform: translatey(30%); } }
@-moz-keyframes valo-animate-out-slide-down-fade {
  100% {
    opacity: 0;
    -webkit-transform: translatey(30%);
    -moz-transform: translatey(30%);
    -ms-transform: translatey(30%);
    -o-transform: translatey(30%);
    transform: translatey(30%); } }
@keyframes valo-animate-out-slide-down-fade {
  100% {
    opacity: 0;
    -webkit-transform: translatey(30%);
    -moz-transform: translatey(30%);
    -ms-transform: translatey(30%);
    -o-transform: translatey(30%);
    transform: translatey(30%); } }
/**
 * Add animate-in-fade animation to the targeted elements.
 *
 * @group animation
 *
 * @param {time} $duration (180ms) - the duration of the fade
 * @param {time} $delay (null) - the delay of the fade
 */
/**
 * Add animate-out-fade animation to the targeted elements.
 *
 * @group animation
 *
 * @param {time} $duration (180ms) - the duration of the fade
 * @param {time} $delay (null) - the delay of the fade
 */
/**
 * Add animate-in-slide-down animation to the targeted elements.
 *
 * @group animation
 *
 * @param {time} $duration (400ms) - the duration of the slide
 * @param {time} $delay (null) - the delay of the slide
 */
/**
 * Add animate-in-slide-up animation to the targeted elements.
 *
 * @group animation
 *
 * @param {time} $duration (400ms) - the duration of the slide
 * @param {time} $delay (null) - the delay of the slide
 */
/**
 * Add animate-in-slide-left animation to the targeted elements.
 *
 * @group animation
 *
 * @param {time} $duration (400ms) - the duration of the slide
 * @param {time} $delay (null) - the delay of the slide
 */
/**
 * Add animate-in-slide-right animation to the targeted elements.
 *
 * @group animation
 *
 * @param {time} $duration (400ms) - the duration of the slide
 * @param {time} $delay (null) - the delay of the slide
 */
/**
 * Outputs cross-browser Valo-specific linear gradient background-image declarations.
 * 
 * @group style
 * 
 * @param {color} $color ($v-background-color) - The base color for the gradient color stops
 * @param {list} $gradient ($v-gradient) - Valo-specific gradient value. See the documentation for $v-gradient.
 * @param {color} $fallback (null) - A fallback color for browser which do not support linear gradients (IE8 and IE9 in particular). If null, the base $color is used instead.
 * @param {string} $direction (to bottom) - the direction of the linear gradient. The color stops are by default so that a lighter shade is at the start and a darker shade is at the end.
 */
/**
 * Returns a valid CSS, Valo-specific, color stop list to be used in a linear gradient.
 * 
 * @group style
 * 
 * @param {color} $color - the base color for the color stops
 * @param {list} $gradient ($v-gradient) - Valo-specific gradient value. See the documentation for $v-gradient.
 */
/**
 * Returns the style part of a Valo-specific gradient value.
 * 
 * @param {list} $gradient ($v-gradient) - Valo-specific gradient value. See the documentation for $v-gradient.
 * 
 * @return {string} One of the possible style values for $v-gradient 
 */
/**
 * Returns the opacity part of a Valo-specific gradient value.
 * 
 * @param {list} $gradient ($v-gradient) - Valo-specific gradient value. See the documentation for $v-gradient.
 * 
 * @return {number} A percentage value from 0% to 100% 
 */
/**
 * Computes a CSS border property value for the given base color.
 *
 * @group style
 *
 * @param {list} $border ($v-border) - CSS border value which can contain any of the color keywords
 * @param {color} $color ($v-background-color) - the base color to which the color keywords are applied to
 * @param {color} $context (null) - context/surrounding color where the border is expected to appear. The color of the final border is the darker of the two parameters passed to this function.
 * @param {number} $strength (1) - adjustment for the border contrast
 *
 * @return {list} The input $border value with any color keyword replaced with the corresponding actual color
 */
/**
 * Similar to the valo-border function, but adjusts the top and bottom border colors to suit an element with a gradient background-color.
 *
 * @group style
 *
 * @param {list} $border ($v-border) - CSS border value which can contain any of the color keywords
 * @param {color} $color ($v-background-color) - the base color to which the color keywords are applied to
 * @param {color} $context (null) - context/surrounding color where the border is expected to appear. The color of the final border is the darker of the two parameters passed to this function.
 * @param {number} $strength (1) - adjustment for the border contrast
 * @param {list} $gradient ($v-gradient) - Valo specific gradient value. See the documentation for $v-gradient.
 */
/**
 * Computes a CSS box-shadow value according to the specified style parameters.
 *
 * @group style
 *
 * @param {list} $bevel (null) - box-shadow value according to $v-bevel documentation
 * @param {number} $bevel-depth ($v-bevel-depth) - percentage defining the depth/amount of the bevel effect. Affects the color keywords specified in the $bevel parameter.
 * @param {list} $shadow (null) - box-shadow value according to $v-shadow documentation
 * @param {number} $shadow-opacity ($v-shadow-opacity) - percentage defining the opacity/amount of the shadow effect. Affects the color keywords specified in the $shadow parameter.
 * @param {color} $background-color ($v-background-color) - the base color to which the color keywords are applied to
 * @param {list} $gradient (null) - Valo specific gradient value. See the documentation for $v-gradient. Affects the color keywords specified in the $bevel parameter.
 * @param {bool} $include-focus (false) - should the box-shadow value include $v-focus-style as well (only added if $v-focus-style is a)
 *
 * @return {list} CSS box-shadow value, combined from $bevel and $shadow with all occurences of v-tint, v-shade and v-tone color keywords replaced with the corresponding actual color
 */
/**
 * Replaces color keywords in the given list.
 *
 * @group style
 *
 * @param {list} $list - any CSS list with possible color keywords
 * @param {color} $color - The color to which color keywords are applied to
 * @param {list} $gradient (null) - Valo specific gradient value. See the documentation for $v-gradient. Affects the replacement colors to accommodate the gradient.
 *
 * @return {list} The input $list parameter with all occurences of v-tint, v-shade and v-tone color keywords replaced with the corresponding actual color
 */
/**
 * Replace color keywords in the given box-shadow parameter.
 *
 * @group style
 *
 * @param {list} $shadow - CSS box-shadow value, or any other CSS list which might contain either the v-tint or the v-shade color keywords.
 *
 * @return {list} the input $shadow parameter with all occurences of v-tint and v-shade color keywords replaced with the corresponding actual color
 */
/**
 * Return a CSS text-shadow property value according to the specified style parameters.
 *
 * @group style
 *
 * @param {color} $font-color ($v-font-color) - the color of the text to which the text-shadow is added
 * @param {color} $background-color ($v-background-color) - the color of the background where the text is to which the text-shadow is added
 * @param {size} $offset (-1px) - the size of the text shadow vertical offset
 * @param {number (pct)} $opacity ($v-shadow-opacity) - the percentage amount of shadow which is applied
 */
/**
 * Ouput selectors and properties to vertically center elements inside their parent.
 * 
 * @param {string} $to-align (()) - The selector to match the elements which you wish to align vertically. The targeted elements should be inline or inline-block elements.
 * @param {string} $align (middle) - The vertical-align value, e.g. top, middle, bottom
 * @param {string} $pseudo-element (after) - Which pseudo element to use for the vertical align guide
 * 
 * @group util
 */
/**
 * Indicate that an element is clickable/tappable
 * 
 * @group util
 */
/**
 * Output Vaadin Responsive extension specific width-range declaration.
 * 
 * @param {size} $min (0) - The lower bound for the width-range
 * @param {size} $max (null) - The upper bound for the width-range
 * 
 * @group util
 * 
 * @example scss
 * .v-ui {
 *   font-size: 18px;
 *   
 *   // Make the font-size smaller for 481px-768px wide UIs
 *   @include width-range(481px, 768px) {
 *     font-size: 16px;
 *   }
 *   
 *   // Make it even smaller for UIs narrower than 480px
 *   @include width-range($max: 480px) {
 *     font-size: 14px;
 *   }
 * }
 */
/**
 * Output Vaadin Responsive extension specific height-range declaration.
 * 
 * @param {size} $min (0) - The lower bound for the height-range
 * @param {size} $max (null) - The upper bound for the height-range
 * 
 * @group util
 * 
 * @example scss
 * .v-csslayout {
 *   color: red;
 *   
 *   // Make the text color blue when the layout height is between 100px-300px
 *   @include height-range(100px, 300px) {
 *     color: blue;
 *   }
 * }
 */
@font-face {
  font-family: FontAwesome;
  font-weight: normal;
  font-style: normal;
  src: url("../../../../base/fonts/fontawesome-webfont.eot");
  src: url("../../../../base/fonts/fontawesome-webfont.eot?#iefix") format("embedded-opentype"), url("../../../../base/fonts/fontawesome-webfont.woff") format("woff"), url("../../../../base/fonts/fontawesome-webfont.ttf") format("truetype"), url("../../../../base/fonts/fontawesome-webfont.svg#FontAwesome") format("svg"); }
.FontAwesome {
  font-family: FontAwesome;
  font-style: normal;
  font-weight: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: inline-block;
  text-align: center; }

@-webkit-keyframes v-rotate-360 {
  to {
    -webkit-transform: rotate(360deg); } }
@-moz-keyframes v-rotate-360 {
  to {
    -moz-transform: rotate(360deg); } }
@-o-keyframes v-rotate-360 {
  to {
    -o-transform: rotate(360deg); } }
@keyframes v-rotate-360 {
  to {
    transform: rotate(360deg); } }
/**
 * Creates a spinner to be used as a loading indicator. On browsers which do not
 * support CSS animations, an animated GIF image is used as a fallback.
 *
 * @param {size} $size (24px) - the diameter of the spinner, in pixels. Should be divisible by 2, increased by 1px if not
 * @param {size} $thickness (2px) - the thickness or width of the border of the spinner
 * @param {color} $color ($v-focus-color) - the color of the border of the spinner
 * @param {time} $speed (500ms) - the speed of the spinning animation
 */
/**
 * The color of the main loading indicator bar.
 * @type color
 */
/**
 * The height of the main loading indicator bar.
 *
 * @type size
 */
/**
 * The height of the main loading indicator bar when the request to the server
 * is taking longer than usual and the user is notified that they should wait.
 *
 * @type size
 */
@-webkit-keyframes v-progress-start {
  0% {
    width: 0%; }
  100% {
    width: 50%; } }
@-moz-keyframes v-progress-start {
  0% {
    width: 0%; }
  100% {
    width: 50%; } }
@keyframes v-progress-start {
  0% {
    width: 0%; }
  100% {
    width: 50%; } }
@-webkit-keyframes v-progress-delay {
  0% {
    width: 50%; }
  100% {
    width: 90%; } }
@-moz-keyframes v-progress-delay {
  0% {
    width: 50%; }
  100% {
    width: 90%; } }
@keyframes v-progress-delay {
  0% {
    width: 50%; }
  100% {
    width: 90%; } }
@-webkit-keyframes v-progress-wait {
  0% {
    width: 90%;
    height: 4px; }
  3% {
    width: 91%;
    height: 7px; }
  100% {
    width: 96%;
    height: 7px; } }
@-moz-keyframes v-progress-wait {
  0% {
    width: 90%;
    height: 4px; }
  3% {
    width: 91%;
    height: 7px; }
  100% {
    width: 96%;
    height: 7px; } }
@keyframes v-progress-wait {
  0% {
    width: 90%;
    height: 4px; }
  3% {
    width: 91%;
    height: 7px; }
  100% {
    width: 96%;
    height: 7px; } }
@-webkit-keyframes v-progress-wait-pulse {
  0% {
    opacity: 1; }
  50% {
    opacity: .1; }
  100% {
    opacity: 1; } }
@-moz-keyframes v-progress-wait-pulse {
  0% {
    opacity: 1; }
  50% {
    opacity: .1; }
  100% {
    opacity: 1; } }
@keyframes v-progress-wait-pulse {
  0% {
    opacity: 1; }
  50% {
    opacity: .1; }
  100% {
    opacity: 1; } }
/*
 * Outputs the necessary styles to create the main loading indicator bar.
 *
 * @access private
 */
/**
 * Outputs the context menu selectors and styles, which is used by Table and Tree for instance.
 * 
 * @requires {mixin} valo-selection-item-style
 * @requires {mixin} valo-selection-item-selected-style
 */
/**
 * The background color for overlay elements.
 *
 * @type color
 * @group overlay
 */
/**
 * The corner radius for overlay elements.
 *
 * @type size (px)
 * @group overlay
 */
/**
 * The border width for overlay elements.
 *
 * @type size (px)
 * @group overlay
 */
/**
 * The animation which is used when overlay elements are made visible.
 *
 * @type list
 * @group overlay
 */
/**
 * The animation which is used when overlay elements are removed.
 *
 * @type list
 * @group overlay
 */
/**
 * The padding on each size of overlay elements.
 *
 * @type size
 * @group overlay
 */
/**
 * The padding on the top and bottom edges of overlay elements.
 *
 * @type size
 * @group overlay
 */
/**
 * The padding on the left and right edges of overlay elements.
 *
 * @type size
 * @group overlay
 */
/**
 * The shadow used for overlay elements.
 *
 * @type list
 * @group overlay
 */
/**
 * The background color for selection overlays, i.e. overlays which present a
 * list of options for the user to choose from, such as context menus and drop down
 * menus.
 *
 * @type color
 * @group overlay
 */
/**
 * The padding on each size of selection overlay elements.
 *
 * @type size
 * @group overlay
 */
/**
 * The padding on the top and bottom edges of selection overlay elements.
 *
 * @type size
 * @group overlay
 */
/**
 * The padding on the left and right edges of selection overlay elements.
 *
 * @type size
 * @group overlay
 */
/**
 * The corner radius for selection overlay elements.
 *
 * @type size (px)
 * @group overlay
 */
/**
 * The height of individual selection overlay list items.
 *
 * @type size (px)
 * @group overlay
 */
/**
 * The horizontal padding for individual selection overlay list items.
 *
 * @type size
 * @group overlay
 */
/**
 * The font weight for individual selection overlay list items.
 *
 * @type number | identifier
 * @group overlay
 */
/**
 * The font color for individual selection overlay list items.
 *
 * @type color
 * @group overlay
 */
/*
 * Simulates CSS box-shadow using the extraneous shadow elements in the DOM.
 *
 * @access private
 * @deprecated The .v-shadow element is deprecated since 7.3.0
 * @group overlay
 */
.v-shadow,
.v-shadow-window {
  display: none; }
  .v-ie8 .v-shadow, .v-ie8
  .v-shadow-window {
    display: block; }
    .v-ie8 .v-shadow .top, .v-ie8
    .v-shadow-window .top {
      position: absolute;
      top: -6px;
      right: 10px;
      bottom: 6px;
      left: -10px;
      background: black;
      filter: alpha(opacity=5) progid:DXImageTransform.Microsoft.blur(pixelradius=10, makeShadow=false); }
    .v-ie8 .v-shadow .top-left, .v-ie8
    .v-shadow-window .top-left {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background: black;
      filter: alpha(opacity=9) progid:DXImageTransform.Microsoft.blur(pixelradius=0, makeShadow=false); }

/**
 * Outputs styles for overlay elements
 *
 * @group overlay
 *
 * @param {color} $background-color ($v-overlay-background-color) - the background color for the overlay
 * @param {list} $shadow ($v-overlay-shadow) - the shadow for the overlay
 * @param {list} $animate-in ($v-overlay-animate-in) - the animation used when the overlay is made visible
 * @param {list} $animate-out ($v-overlay-animate-out) - the animation used when the overlay is removed
 */
/**
 * Outputs styles for selection overlay elements.
 *
 * @group overlay
 *
 * @param {color} $background-color ($v-selection-overlay-background-color) - the background color for the overlay
 * @param {list} $animate-in ($v-overlay-animate-in) - the animation used when the selection overlay is made visible
 * @param {list} $animate-out ($v-overlay-animate-out) - the animation used when the selection overlay is removed
 */
/**
 * Outputs the styles for selection item elements (i.e. individual items in context menus and drop down menus).
 *
 * @group overlay
 */
/**
 * Outputs the styles for selected selection item elements.
 *
 * @group overlay
 */
/**
 * Outputs the selectors and styles for generic dragging ghost elements.
 *
 * @group drag-n-drop
 */
/**
 * Outputs the styles for generic dragging ghost elements.
 *
 * @group drag-n-drop
 *
 * @param {color} $background-color ($v-app-background-color) - the background color for the ghost element
 */
/**
 * The backgound color for tooltips.
 *
 * @type color
 * @group tooltip
 */
/**
 * The font color for tooltips.
 *
 * @type color
 * @group tooltip
 */
/**
 * The font size for tooltips.
 *
 * @type size
 * @group tooltip
 */
/**
 * The CSS box shadow for tooltips.
 *
 * @type list
 * @group tooltip
 */
/**
 * The vertical padding for tooltips.
 *
 * @type size
 * @group tooltip
 */
/**
 * The horizontal padding for tooltips.
 *
 * @type size
 * @group tooltip
 */
/**
 * The backgound color for error tooltips.
 *
 * @type color
 * @group tooltip
 */
/**
 * The font color for error tooltips.
 *
 * @type color
 * @group tooltip
 */
/**
 * The corner radius for tooltips.
 *
 * @type size
 * @group tooltip
 */
/**
 * Outputs the selectors and styles for tooltip elements.
 *
 * @group tooltip
 */
/**
 * Outputs the main styles for tooltip elements.
 *
 * @group tooltip
 */
/*
 * A flag which is set to true when the global styles have been included in the compilation.
 * Used to only include them once, if Valo is imported multiple times during the compilation
 * (multiple theme support).
 *
 * @access private
 * @type bool
 */
/*
 * Global Valo related styles, containing styles which are necessary for the application
 * and widgets to work correctly.
 *
 * @access private
 */
/**
 * Styles for the application root element. Outputs font, font color, background color and default
 * cursor styles.
 */
/**
 * Common application styles, such as loading indicators, tooltip and context menu styles,
 * caption and icon defaults, basic HTML element resets.
 * Should only be included once (done automatically when including the main valo mixin).
 *
 * @requires {mixin} valo-app-style
 */
/**
 * Generic component caption styles (captions which are generated by layouts).
 */
/**
 * Error indicator styles. The error indicator is by default a font character which you can style freely.
 *
 * @requires {mixin} valo-error-indicator-icon-style by default
 */
/**
 * The error indicator icon style. Should be a font character or a font icon.
 */
/**
 * Make the BODY element scrollable instead of the .v-ui element. Scrolling the BODY usually
 * works better on touch devices. You loose the ability to control the scroll position from
 * the server side when using this.
 *
 * @example scss
 *  // Include without any parent selector
 *  @include valo-natural-page-scrolling;
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-absolutelayout) - 
 *
 * @group absolutelayout
 */
/**
 * Outputs the selectors and properties for the Accordion component.
 *
 * @param {string} $primary-stylename (v-accordion) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 * @group accordion
 */
/**
 * Outputs the styles for the Accordion component root element.
 * @group accordion
 */
/**
 * Outputs the styles for an individual Accordion item root element.
 * @group accordion
 */
/**
 * Outputs the styles for an individual Accordion item's caption element.
 *
 * @param {color} $background-color (null) - the background color of the caption. Other styles (such as font and border colors, gradients and bevels) adapt to the background color automatically.
 * @group accordion
 */
/**
 * Outputs the styles for an individual Accordion item's content element.
 * @group accordion
 */
/**
 * Outputs the selectors and properties for the Button component.
 *
 * @param {string} $primary-stylename (v-button) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 *
 * @group button
 */
/**
 * Outputs the static styles (i.e. styles which don't differ between button variants) for a button.
 *
 * @param {list} $states (normal hover focus active disabled) - The button states for which to output corresponding static styles
 * @param {bool} $vertical-centering (true) - Should the output contain a vertical centering guide
 *
 * @group button
 */
/**
 * Outputs the styles for a button variant.
 *
 * @param {size} $unit-size ($v-unit-size) - The sizing of the button, which corresponds its height
 * @param {size | list} $padding (null) - The padding of the button. Computed from other parameters by default.
 * @param {color} $font-color (null) - The font color of the button. Computed from the $background-color by default.
 * @param {number} $font-weight ($v-font-weight + 100) - The font weight of the button
 * @param {size} $font-size (null) - The font size of the button. Inherited from the parent by default.
 * @param {string} $cursor (null) - The mouse cursor of the button
 * @param {color} $background-color ($v-background-color) - The background color of the button
 * @param {list} $border ($v-border) - The border of the button
 * @param {size} $border-radius ($v-border-radius) - The border-radius of the button
 * @param {list} $gradient ($v-gradient) - Valo specific gradient value. See the documentation for $v-gradient.
 * @param {list} $bevel ($v-bevel) - Box-shadow value according to $v-bevel documentation
 * @param {list} $shadow ($v-shadow) - Box-shadow value according to $v-shadow documentation
 * @param {list} $states (normal hover focus active disabled) - The button states for which to output corresponding styles
 *
 * @group button
 */
/**
 * Outputs the hover state styles for a button. The styles are by default targeted
 * for a pseudo element which is shown on top of the normal state button.
 *
 * @group button
 *
 * @param {color} $background-color ($v-background-color) - The background color of the normal state button
 */
/**
 * Outputs the focus state styles for a button. The styles are by default targeted
 * for a pseudo element which is shown on top of the normal state button.
 *
 * @group button
 *
 * @param {color} $background-color ($v-background-color) - The background color of the normal state button
 * @param {list} $border-fallback (inherit) - If the luminance of $v-focus-color is less than the $background-color, the focus color is also used for the border color. If not, then $border-fallback is used for the focus element's border value.
 */
/**
 * Outputs the active state (pressed/down) styles for a button. The styles are by default targeted
 * for a pseudo element which is shown on top of the normal state button.
 *
 * @group button
 *
 * @param {color} $background-color ($v-background-color) - The background color of the normal state button
 */
/**
 * Outputs styles to allow vertical centering of the icon and the caption, independent of the 
 * height of the button.
 * 
 * @group button
 */
/**
 * Output styles for a borderless button. Expects that the targeted element 
 * already has both valo-button-static-style and valo-button-style included.
 * 
 * @param {color} $font-color (inherit) - The font color of the borderless button
 * 
 * @group button
 */
/**
 * Output styles for a "quiet" button (a button whose outline is only shown 
 * once the user hovers over the button caption). Expects that the targeted 
 * element already has both valo-button-static-style and valo-button-style 
 * included.
 * 
 * @group button
 */
/**
 * Output styles to align a button's icon on the right side of its caption.
 * 
 * @group button
 */
/**
 * Output styles to align a button's icon on top of its caption.
 * 
 * @group button
 */
/**
 * A list of colors for custom event colors. Can be an empty list of you don't 
 * need any custom event colors.
 * 
 * @example javascript
 * // Java code
 * // 'event' is an instance of EditableCalendarEvent
 * event.setStyleName("color1"); // 1st color in the list
 * event.setStyleName("color2"); // 2nd color in the list
 * // etc.
 * 
 * @group calendar
 */
/**
 * Outputs the global selectors and properties for the Calendar component - styles which are 
 * considered mandatory for the component to work properly.
 *
 * @param {string} $primary-stylename (v-calendar) - the primary style name for the selectors
 *
 * @group calendar
 */
/**
 * Outputs the selectors and properties for the Calendar component.
 *
 * @param {string} $primary-stylename (v-calendar) - the primary style name for the selectors
 *
 * @group calendar
 */
/**
 * Outputs the styles for the previous button.
 * 
 * @group calendar
 */
/**
 * Outputs the styles for the next button.
 * 
 * @group calendar
 */
/**
 * Outputs the selectors and properties for the CheckBox component.
 *
 * @param {string} $primary-stylename (v-checkbox) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 *
 * @group checkbox
 */
/**
 * Outputs the font icon to indicate the checked state.
 * 
 * @group checkbox
 */
/**
 * Outputs the styles for a checkbox variant.
 * 
 * @param {color} $background-color ($v-background-color) - The background color of the checkbox
 * @param {size} $unit-size ($v-unit-size) - The sizing of the checkbox. The width and height of the checkbox will be the unit-size divided by 2.
 * @param {color} $selection-color ($v-selection-color) - The color of the checked state icon 
 * 
 * @group checkbox
 */
/**
 * Outputs the global selectors and properties for the ColorPicker component - styles which are 
 * considered mandatory for the component to work properly.
 *
 * @param {string} $primary-stylename (v-colorpicker) - the primary style name for the selectors
 *
 * @group colorpicker
 */
/**
 * Outputs the selectors and properties for the ColorPicker component.
 *
 * @param {string} $primary-stylename (v-colorpicker) - the primary style name for the selectors
 *
 * @group colorpicker
 */
/**
 * Outputs the selectors and properties for the ComboBox component.
 *
 * @param {string} $primary-stylename (v-filterselect) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 *
 * @group combobox
 */
/**
 * Outputs the styles for a combobox variant.
 *
 * @param {size} $unit-size ($v-unit-size) - The sizing of the combobox, which corresponds its height
 * @param {color} $font-color (null) - The font color of the combobox. Computed from the $background-color by default.
 * @param {number} $font-weight (max(400, $v-font-weight)) - The font weight of the combobox
 * @param {size} $font-size (null) - The font size of the combobox. Inherited from the parent by default.
 * @param {color} $background-color ($v-textfield-background-color) - The background color of the combobox
 * @param {list} $border ($v-textfield-border) - The border of the combobox
 * @param {size} $border-radius ($v-textfield-border-radius) - The border-radius of the combobox
 * @param {list} $gradient (none) - Valo specific gradient value. See the documentation for $v-gradient.
 * @param {list} $bevel ($v-textfield-bevel) - Box-shadow value according to $v-bevel documentation
 * @param {list} $shadow ($v-textfield-shadow) - Box-shadow value according to $v-shadow documentation
 * @param {list} $states (normal focus disabled) - The combobox states for which to output corresponding styles
 *
 * @group combobox
 */
/**
 * Outputs the styles for a combobox variant input element.
 * 
 * @param {size} $unit-size ($v-unit-size) - The sizing of the input (affects the padding only, width and height are 100%)
 * @param {size | list} $padding (null) - The padding of the input. Computed from other parameters by default.
 * @param {color} $font-color (null) - The font color of the input. Computed from the $background-color by default.
 * @param {number} $font-weight (null) - The font weight of the input. Inherited from the parent by default.
 * @param {size} $font-size (null) - The font size of the combobox. Inherited from the parent by default.
 * @param {color} $background-color ($v-textfield-background-color) - The background color of the input
 * @param {list} $border ($v-textfield-border) - The border of the input
 * @param {size} $border-radius ($v-textfield-border-radius) - The border-radius of the input
 * @param {list} $gradient (none) - Valo specific gradient value. See the documentation for $v-gradient.
 * @param {list} $bevel ($v-textfield-bevel) - Box-shadow value according to $v-bevel documentation
 * @param {list} $shadow ($v-textfield-shadow) - Box-shadow value according to $v-shadow documentation
 * @param {list} $states (normal focus disabled) - The combobox states for which to output corresponding styles
 *
 * @group combobox
 */
/**
 * Outputs the styles for a combobox variant button element.
 * 
 * @param {size} $unit-size ($v-unit-size) - The sizing of the button, which corresponds its width.
 * @param {list} $bevel ($v-textfield-bevel) - Box-shadow value according to $v-bevel documentation
 * @param {color} $background-color ($v-textfield-background-color) - The background color of the input, which affects the font color of the button
 * @param {size} $border-radius ($v-textfield-border-radius) - The border-radius of the input, which affects the border-radius of the button
 * @param {list} $border ($v-textfield-border) - The border of the input, which affects the border of the button
 *
 * @group combobox
 */
/**
 * Outputs the font icon styles for the combobox drop down button.
 *
 * @group combobox
 */
/**
 * Outputs the styles for a combobox popup.
 *
 * @group combobox
 */
/**
 *
 *
 *
 * @group combobox
 */
/**
 * The amount of spacing between different widgets in a component group.
 * If null, a computed value is used ($v-border size * -1, or 1px if $v-border size is 0)
 * 
 * @group csslayout
 */
/**
 * Outputs the additional styles for the CssLayout component. Does not produce any other output.
 * 
 * @param {string} $primary-stylename (v-csslayout) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 *
 * @group csslayout
 */
/**
 * Outputs the styles for a horizontal component group. The target component is 
 * expected to be a CssLayout, which is a single DIV element with child components 
 * directly inside.
 * 
 * @group csslayout
 * 
 * @example scss
 * .my-csslayout {
 *   @include valo-component-group;
 * }
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-customcomponent) - 
 *
 * @group customcomponent
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-customlayout) - 
 *
 * @group customlayout
 */
/**
 * Outputs the selectors and properties for the DateField component.
 *
 * @param {string} $primary-stylename (v-datefield) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 *
 * @group datefield
 */
/**
 * Outputs the selectors and properties for the InlineDateField component.
 *
 * @param {string} $primary-stylename (v-inline-datefield) - the primary style name for the selectors
 *
 * @group datefield
 */
/**
 * Outputs the styles for a date field variant.
 *
 * @param {list} $bevel ($v-textfield-bevel) - Box-shadow value according to $v-bevel documentation
 * @param {list} $shadow ($v-textfield-shadow) - Box-shadow value according to $v-shadow documentation
 * @param {size} $unit-size ($v-unit-size) - The sizing of the datefield, which corresponds its height
 * @param {list} $border ($v-textfield-border) - The border of the datefield
 * @param {size} $border-radius ($v-textfield-border-radius) - The border-radius of the datefield
 * @param {color} $background-color ($v-textfield-background-color) - The background color of the datefield
 * @param {list} $states (normal focus disabled) - The datefield states for which to output corresponding styles
 *
 * @group datefield
 */
/**
 * Outputs the styles for a date field variant button element.
 * 
 * @param {size} $unit-size ($v-unit-size) - The sizing of the button, which corresponds its width.
 * @param {list} $bevel ($v-textfield-bevel) - Box-shadow value according to $v-bevel documentation
 * @param {color} $background-color ($v-textfield-background-color) - The background color of the input, which affects the font color of the button
 * @param {size} $border-radius ($v-textfield-border-radius) - The border-radius of the input, which affects the border-radius of the button
 * @param {list} $border ($v-textfield-border) - The border of the input, which affects the border of the button
 *
 * @group datefield
 */
/**
 * Outputs the font icon styles for the date field drop down button.
 *
 * @group datefield
 */
/**
 * Outputs the styles for a date field popup.
 *
 * @group datefield
 */
/**
 * Outputs the styles for calendar panel (i.e. month view).
 * 
 * @param {string} $primary-stylename (v-datefield-calendarpanel) - the primary style name for the selectors
 *
 * @group datefield
 */
/**
 * Outputs the styles for an individual day element in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the hover state styles for an individual day element in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the styles for an individual day element, which are not part of the current month, in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the styles for an individual day element, which are outside available range.
 *
 * @group datefield
 */
/**
 * Outputs the styles for todays day element in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the styles for the selected day element in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the focus state styles for an individual day element in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the font icon styles for the next month button in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the font icon styles for the previous month button in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the font icon styles for the next year button in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the font icon styles for the previous year button in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the styles for the current month and year title element in a calendar panel.
 * 
 * @group datefield
 */
/**
 * Outputs the styles and selectors for the DragAndDropWrapper component.
 * 
 * @param {string} $primary-stylename (v-ddwrapper) - the primary style name for the selectors
 * 
 * @group drag-n-drop
 */
/**
 * Outputs the styles for a drop target when the drag is on top of it.
 * 
 * @group drag-n-drop
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-form) - 
 *
 * @group form
 */
/**
 * Outputs the selectors and properties for the FormLayout component.
 *
 * @param {string} $primary-stylename (v-formlayout) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 *
 * @group formlayout
 */
/**
 * Outputs the styles for form layout margin.
 *
 * @param {list} $margin ($v-layout-margin-top $v-layout-margin-right $v-layout-margin-bottom $v-layout-margin-left) - The margin for the form layout (any valid CSS margin value)
 *
 * @group formlayout
 */
/**
 * Outputs the styles for form layout spacing.
 *
 * @param {size} $vertical ($v-layout-spacing-vertical) - The vertical spacing between the rows in the form layout
 *
 * @group formlayout
 */
/**
 * Outputs the styles for a light style form layout. This mixin expects the target to have the normal styles of a form layout applied.
 *
 * @param {size} $row-height ($v-unit-size) - The height of an individual form layout row
 *
 * @group formlayout
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {color} $context ($v-background-color) - 
 *
 * @return {color} - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 * @param {bool} $include-additional-styles - 
 *
 * @group table
 */
/**
 *
 *
 *
 * @group table
 */
/**
 *
 *
 *
 * @group table
 */
/**
 *
 *
 *
 * @group table
 */
/**
 *
 *
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-grid) -
 *
 * @group grid
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-gridlayout) - 
 *
 * @group gridlayout
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-gridlayout) - 
 *
 * @group gridlayout
 */
/**
 * The font weight for headers.
 * 
 * @group label
 */
/**
 * The line height for headers.
 * 
 * @group label
 */
/**
 * The font family for headers.
 * 
 * @group label
 */
/**
 * The font color for colored style labels.
 * 
 * @group label
 */
/**
 * The font size for 1st level headers.
 * 
 * @group label
 */
/**
 * The font size for 2nd level headers.
 * 
 * @group label
 */
/**
 * The font size for 3rd level headers.
 * 
 * @group label
 */
/**
 * The font family for 1st level headers.
 * 
 * @group label
 */
/**
 * The font family for 2nd level headers.
 * 
 * @group label
 */
/**
 * The font family for 3rd level headers.
 * 
 * @group label
 */
/**
 * The letter spacing for 1st level headers.
 * 
 * @group label
 */
/**
 * The letter spacing for 2nd level headers.
 * 
 * @group label
 */
/**
 * The letter spacing for 3rd level headers.
 * 
 * @group label
 */
/**
 * The letter spacing for 4th level headers.
 * 
 * @group label
 */
/**
 * Outputs the selectors and styles for the Label component.
 * 
 * @param {string} $primary-stylename (v-label) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 *
 * @group label
 */
/**
 *
 * @group link
 */
/**
 *
 * @group link
 */
/**
 *
 * @group link
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-link) -
 * @param {bool} $include-additional-styles -
 *
 * @group link
 */
/**
 *
 *
 *
 * @group link
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-loginform) - 
 *
 * @group loginform
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-menubar) - 
 * @param {bool} $include-additional-styles - 
 *
 * @group menubar
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-menubar) - 
 * @param {color} $background-color ($v-background-color) - 
 * @param {size} $unit-size ($v-unit-size) - 
 *
 * @group menubar
 */
/**
 *
 *
 *
 * @group menubar
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-menubar) - 
 *
 * @group menubar
 */
/**
 *
 *
 *
 * @group menubar
 */
/**
 *
 *
 *
 * @group menubar
 */
/**
 *
 *
 * @param {list} $background-color - 
 *
 * @group menubar
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-menubar) - 
 *
 * @group menubar
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-menubar) - 
 *
 * @group menubar
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-nativebutton) - 
 *
 * @group nativebutton
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-select) - 
 *
 * @group nativeselect
 */
/**
 *
 *
 *
 * @group nativeselect
 */
/**
 *
 * @group notification
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-Notification) - 
 * @param {bool} $include-additional-styles - 
 *
 * @group notification
 */
/**
 *
 *
 *
 * @group notification
 */
/**
 *
 *
 *
 * @group notification
 */
/**
 *
 *
 *
 * @group notification
 */
/**
 *
 *
 *
 * @group notification
 */
/**
 *
 *
 *
 * @group notification
 */
/**
 *
 *
 *
 * @group notification
 */
/**
 *
 *
 *
 * @group notification
 */
/**
 *
 *
 *
 * @group notification
 */
/**
 *
 *
 *
 * @group notification
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-select-optiongroup) - 
 * @param {bool} $include-additional-styles - 
 *
 * @group optiongroup
 */
/**
 *
 *
 * @param {color} $background-color ($v-background-color) - 
 * @param {size} $unit-size ($v-unit-size) - 
 * @param {color} $selection-color ($v-selection-color) - 
 *
 * @group optiongroup
 */
/**
 *
 *
 * @param {size} $unit-size ($v-unit-size) - 
 * @param {size} $font-size ($v-font-size) - 
 *
 * @group optiongroup
 */
/**
 *
 *
 *
 * @group optiongroup
 */
/**
 *
 *
 *
 * @group orderedlayout
 */
/**
 *
 *
 * @param {bool} $include-additional-styles - 
 *
 * @group orderedlayout
 */
/**
 *
 *
 *
 * @group orderedlayout
 */
/**
 *
 * @group panel
 */
/**
 *
 * @group panel
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-panel) - 
 * @param {bool} $include-additional-styles - 
 *
 * @group panel
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-panel) - 
 * @param {color} $background-color ($v-panel-background-color) - 
 * @param {list} $shadow ($v-shadow) - 
 * @param {list} $border ($v-panel-border) - 
 * @param {string} $border-radius ($v-border-radius) - 
 *
 * @group panel
 */
/**
 *
 *
 * @param {color} $background-color ($v-background-color) - 
 * @param {list} $bevel ($v-bevel) - 
 * @param {list} $gradient (valo-gradient-style($v-gradient) valo-gradient-opacity($v-gradient)/4) - 
 * @param {list} $border ($v-panel-border) - 
 *
 * @group panel
 */
/**
 *
 *
 * @param {list} $shadow (false) - 
 *
 * @group panel
 */
/**
 *
 *
 *
 * @group panel
 */
/**
 *
 *
 * @param {size} $border-width (max(1px, first-number($v-panel-border))) - 
 *
 * @group panel
 */
/**
 *
 *
 *
 * @group panel
 */
@-webkit-keyframes v-popupview-animate-in {
  0% {
    -webkit-transform: scale(0);
    -moz-transform: scale(0);
    -ms-transform: scale(0);
    -o-transform: scale(0);
    transform: scale(0); } }
@-moz-keyframes v-popupview-animate-in {
  0% {
    -webkit-transform: scale(0);
    -moz-transform: scale(0);
    -ms-transform: scale(0);
    -o-transform: scale(0);
    transform: scale(0); } }
@keyframes v-popupview-animate-in {
  0% {
    -webkit-transform: scale(0);
    -moz-transform: scale(0);
    -ms-transform: scale(0);
    -o-transform: scale(0);
    transform: scale(0); } }
/**
 *
 *
 * @param {string} $primary-stylename (v-popupview) - 
 *
 * @group popupview
 */
/**
 *
 * @group progressbar
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-progressbar) - 
 *
 * @group progressbar
 */
/**
 *
 *
 * @param {color} $background-color ($v-background-color) - 
 *
 * @group progressbar
 */
/**
 *
 *
 * @param {color} $background-color ($v-selection-color) - 
 * @param {string} $border ($v-border) - 
 *
 * @group progressbar
 */
/**
 *
 * @group richtextarea
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-richtextarea) - 
 *
 * @group richtextarea
 */
/**
 *
 * @group slider
 */
/**
 *
 * @group slider
 */
/**
 *
 * @group slider
 */
/**
 *
 * @group slider
 */
/**
 *
 * @group slider
 */
/**
 *
 * @group slider
 */
/**
 *
 * @group slider
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-slider) - 
 * @param {bool} $include-additional-styles - 
 *
 * @group slider
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-slider) - 
 * @param {color} $background-color ($v-background-color) - 
 *
 * @group slider
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-slider) - 
 * @param {color} $background-color ($v-selection-color) - 
 * @param {list} $border ($v-border) - 
 *
 * @group slider
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-slider) - 
 *
 * @group slider
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-slider) - 
 * @param {color} $background-color ($v-background-color) - 
 *
 * @group slider
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-slider) - 
 * @param {number} $tick-count (5) - 
 *
 * @group slider
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-splitpanel) - 
 * @param {bool} $include-additional-styles - 
 *
 * @group splitpanel
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-splitpanel) - 
 *
 * @group splitpanel
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-splitpanel) - 
 * @param {size} $splitter-size (max(1px, first-number($v-border)) - 
 * @param {list} $splitter-active-size (round($v-unit-size/3)) - 
 * @param {bool} $splitter-handle-visible (false) - 
 * @param {list} $splitter-shadow (none) - 
 * @param {list} $orientation (vertical horizontal) - 
 *
 * @group splitpanel
 */
/**
 *
 *
 * @param {bool} $horizontal (false) - 
 * @param {bool} $include-common (true) - 
 *
 * @group splitpanel
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {color} $context ($v-background-color) - 
 *
 * @return {color} - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 * @param {bool} $include-additional-styles - 
 *
 * @group table
 */
/**
 *
 *
 *
 * @group table
 */
/**
 *
 *
 *
 * @group table
 */
/**
 *
 *
 *
 * @group table
 */
/**
 *
 *
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-table) - 
 *
 * @group table
 */
/**
 * Should the tabsheet content changes be animated.
 * 
 * @group tabsheet
 */
/**
 * Outputs the global selectors and properties for the TabSheet component - styles which are 
 * considered mandatory for the component to work properly.
 *
 * @param {string} $primary-stylename (v-tabsheet) - the primary style name for the selectors
 *
 * @group tabsheet
 */
/**
 * Outputs the selectors and properties for the TabSheet component.
 *
 * @param {string} $primary-stylename (v-tabsheet) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 *
 * @group tabsheet
 */
/**
 * Outputs the styles for the tabcontainer element of a tabsheet.
 * 
 * @group tabsheet
 */
/**
 * Outputs the styles for the tabitemcell element of a tabsheet.
 * 
 * @group tabsheet
 */
/**
 * Outputs the styles for the tab scroller element of a tabsheet.
 * 
 * @group tabsheet
 */
/**
 * Outputs the font icon styles for the previous button element of a tabsheet scroller.
 * 
 * @group tabsheet
 */
/**
 * Outputs the font icon styles for the next button element of a tabsheet scroller.
 * 
 * @group tabsheet
 */
/**
 * Outputs the styles for the framed tabsheet style.
 * 
 * @param {string} $primary-stylename (v-tabsheet) - The primary style name for the selectors
 * @param {bool} $frame-inactive-tabs (true) - Should inactive tabs be framed as well (the active tab is always framed with this style)
 * @param {bool} $outer-frame (true) - Should the frame contain the whole tabsheet (i.e. tabbar and tab content). If false, works like a "borderless" style.
 * @param {size} $tab-spacing ($v-unit-size/10) - The spacing between tabs
 * 
 * @group tabsheet
 */
/**
 * Outputs the styles for a tabsheet where the tabs are aligned to the position specified by the parameter in the tabbar.
 * 
 * @param {string} $primary-stylename (v-tabsheet) - The primary style name for the selectors
 * @param {string} $align (center) - The alignment of the tabs inside the tabbar. Possible values: left, right, center.
 * 
 * @group tabsheet
 */
/**
 * Outputs the styles for a tabsheet where all tabs in the tabbar have equal width and span the entire width of the tabbar.
 * 
 * @param {string} $primary-stylename (v-tabsheet) - The primary style name for the selectors
 * @param {bool} $flex (false) - Should the size of the tabs be proportional to their content, i.e. should the available space in the tabbar be distributed to the tabs in relation to their content sizes.
 * 
 * @group tabsheet
 */
/**
 * Outputs the styles for a tabsheet where the icons of individual tabs are on top of the tab captions.
 * 
 * @param {string} $primary-stylename (v-tabsheet) - The primary style name for the selectors
 *  
 * @group tabsheet
 */
/**
 * Outputs the styles for a tabsheet where only the selected tab has the close button visible. 
 * Note that the other tabs can still be closed programmatically.
 * 
 * @param {string} $primary-stylename (v-tabsheet) - The primary style name for the selectors
 *  
 * @group tabsheet
 */
/**
 * Outputs the styles for a tabsheet where the tabbar has increased padding to separate the tabs 
 * inside it from their surrounding container.
 * 
 * @param {string} $primary-stylename (v-tabsheet) - The primary style name for the selectors
 *  
 * @group tabsheet
 */
/**
 * The background color for text fields.
 * @group textfield
 */
/**
 * The background color for read-only text fields.
 * @group textfield
 */
/**
 * The bevel style for text fields. See the documentation for $v-bevel.
 * @group textfield
 */
/**
 * The shadow style for text fields. See the documentation for $v-shadow.
 * @group textfield
 */
/**
 * The font-weight for text fields.
 * @group textfield
 */
/**
 * The border style for text fields. See the documentation for $v-border.
 * @group textfield
 */
/**
 * The border-radius for text fields. See the documentation for $v-border-radius;
 * @group textfield
 */
/**
 * The opacity for disabled text fields.
 * @group textfield
 */
/**
 * Outputs the selectors and properties for the TextField component.
 *
 * @param {string} $primary-stylename (v-textfield) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 *
 * @group textfield
 */
/**
 * Outputs the styles for a text field variant.
 *
 * @param {size} $unit-size ($v-unit-size) - The sizing of the text field, which corresponds its height
 * @param {size | list} $padding (null) - The padding of the text field. Computed from other parameters by default.
 * @param {color} $font-color (null) - The font color of the text field. Computed from the $background-color by default.
 * @param {number} $font-weight (max(400, $v-font-weight)) - The font weight of the text field
 * @param {size} $font-size (null) - The font size of the text field. Inherited from the parent by default.
 * @param {color} $background-color ($v-textfield-background-color) - The background color of the text field
 * @param {list} $border ($v-textfield-border) - The border of the text field
 * @param {size} $border-radius ($v-textfield-border-radius) - The border-radius of the text field
 * @param {list} $bevel ($v-textfield-bevel) - Box-shadow value according to $v-bevel documentation
 * @param {list} $shadow ($v-textfield-shadow) - Box-shadow value according to $v-shadow documentation
 * @param {list} $states (normal focus disabled) - The text field states for which to output corresponding styles
 *
 * @group textfield
 */
/**
 * Outputs the styles for a text field input prompt.
 * 
 * @param {color} $background-color ($v-textfield-background-color) - The background color of the text field
 * 
 * @group textfield
 */
/**
 * Outputs the styles for a text field focus state.
 * 
 * @param {list} $bevel ($v-textfield-bevel) - Box-shadow value according to $v-bevel documentation
 * @param {list} $shadow ($v-textfield-shadow) - Box-shadow value according to $v-shadow documentation
 * @param {color} $background-color ($v-textfield-background-color) - The background color of the text field
 * @param {list} $gradient (null) - Valo specific gradient value. See the documentation for $v-gradient.
 * 
 * @group textfield
 */
/**
 * Outputs the styles for a read-only text field.
 * 
 * @group textfield
 */
/**
 * Outputs the styles for a borderless style text field.
 * 
 * @param {color} $background-color (transparent) - The background color of the text field
 * 
 * @group textfield
 */
/**
 * Outputs the styles for a text field error state.
 * 
 * @group textfield
 */
/**
 * Outputs the selectors and styles for an inline-icon style for a text field. Included indipendently (i.e. not enclosed with a parent text field selector). 
 * 
 * @param {string} $primary-stylename (v-textfield) - The primary style name for the selectors
 * @param {string | list} $stylenames (inline-icon) - The additional style names which will define the inline-icon style
 * @param {string} $input-selector (null) - Additional selector for a nested input element which should be targeted
 * @param {size} $unit-size ($v-unit-size) - The unit size which the resulting style will support
 * @param {size} $font-size ($v-font-size) - The font size which the resulting style will support (needed for font icons)
 * @param {size} $image-icon-size (16px) - The image icon height which the resulting style will support (needed to center the icon vertically inside the text field)
 * 
 * @group text field
 */
/**
 * Outputs the selectors and properties for the TextArea component.
 *
 * @param {string} $primary-stylename (v-textarea) - the primary style name for the selectors
 * @param {bool} $include-additional-styles - should the mixin output all the different style variations of the component
 *
 * @group textarea
 */
/**
 * Outputs the styles for a text area variant.
 *
 * @param {size} $unit-size ($v-unit-size) - The sizing of the text area, which corresponds its height
 * @param {size | list} $padding (null) - The padding of the text area. Computed from other parameters by default.
 * @param {color} $font-color (null) - The font color of the text area. Computed from the $background-color by default.
 * @param {number} $font-weight (max(400, $v-font-weight)) - The font weight of the text area
 * @param {size} $font-size (null) - The font size of the text area. Inherited from the parent by default.
 * @param {color} $background-color ($v-textfield-background-color) - The background color of the text area
 * @param {list} $border ($v-textfield-border) - The border of the text area
 * @param {size} $border-radius ($v-textfield-border-radius) - The border-radius of the text area
 * @param {list} $bevel ($v-textfield-bevel) - Box-shadow value according to $v-bevel documentation
 * @param {list} $shadow ($v-textfield-shadow) - Box-shadow value according to $v-shadow documentation
 * @param {list} $states (normal focus disabled) - The text area states for which to output corresponding styles
 *
 * @group textfield
 */
/**
 *
 * @group tree
 */
/**
 *
 * @group tree
 */
/**
 *
 * @group tree
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-tree) - 
 *
 * @group tree
 */
/**
 *
 *
 *
 * @group tree
 */
/**
 *
 *
 * @param {bool} $force (false) - 
 *
 * @group tree
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-treetable) - 
 *
 * @group treetable
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-select-twincol) - 
 *
 * @group twin-column-select
 */
/**
 *
 *
 *
 * @group twin-column-select
 */
/**
 *
 *
 *
 * @group twin-column-select
 */
/**
 *
 *
 * @param {string} $primary-stylename (v-upload) -
 *
 * @group upload
 */
/**
 *
 */
/**
 *
 */
/**
 * @group window
 */
/**
 * @group window
 */
/**
 * @group window
 */
/**
 * @group window
 */
/**
 * @group window
 */
/**
 * @group window
 */
@-webkit-keyframes valo-modal-window-indication {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }
@-moz-keyframes valo-modal-window-indication {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }
@keyframes valo-modal-window-indication {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }
@-webkit-keyframes valo-animate-out-scale-down-fade {
  100% {
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8);
    opacity: 0; } }
@-moz-keyframes valo-animate-out-scale-down-fade {
  100% {
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8);
    opacity: 0; } }
@keyframes valo-animate-out-scale-down-fade {
  100% {
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8);
    opacity: 0; } }
/**
 *
 *
 * @param {string} $primary-stylename (v-window) - 
 *
 * @group window
 */
/**
 *
 *
 *
 * @group window
 */
/**
 *
 *
 *
 * @group window
 */
/**
 *
 *
 *
 * @group window
 */
/**
 * @group valo-menu
 */
/**
 *
 *
 * @param {string} $bg ($valo-menu-background-color) - 
 *
 * @group valo-menu
 */
/**
 *
 *
 *
 * @group valo-menu
 */
/**
 *
 *
 * @param {string} $bg ($valo-menu-background-color) - 
 *
 * @group valo-menu
 */
/**
 *
 *
 *
 * @group valo-menu
 */
/**
 *
 *
 * @param {color} $bg ($valo-menu-background-color) - 
 *
 * @group valo-menu
 */
/**
 *
 *
 * @param {color} $bg ($valo-menu-background-color) - 
 *
 * @group valo-menu
 */
/**
 *
 *
 * @param {string} $states (inactive active) - 
 * @param {color} $background-color (null) - 
 * @param {color} $active-color ($v-selection-color) - 
 *
 * @group valo-menu
 */
/**
 *
 *
 * @param {color} $bg (darken($valo-menu-background-color, 4%)) - 
 *
 * @group valo-menu
 */
/**
 *
 *
 *
 * @group valo-menu
 */
/**
 * Outputs all the selectors and properties for all individual components to produce 
 * the variation specified by global variables.
 * 
 * This mixin can be called multiple times for a theme, if you for instance wish to 
 * generate alternative color versions of the components.
 * 
 * @example scss
 * .my-theme {
 *   // The default color variation
 *   @include valo;
 *   
 *   .sidebar {
 *     // For the sidebar context, we generate a darker variant of all components
 *      $v-background-color: #696969;
 *      background-color: $v-background-color;
 *      @include valo-components;
 *   }
 * }
 */
.v-vaadin-version:after {
  content: "7.4.0.SNAPSHOT-12-a264cdf59106360c250af73d93a25d7c7a3b1542"; }

.v-widget {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  display: inline-block;
  vertical-align: top;
  text-align: left;
  white-space: normal; }

.v-generated-body {
  overflow: hidden;
  margin: 0;
  padding: 0;
  border: 0; }

.v-app {
  -webkit-tap-highlight-color: transparent;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none; }
  .v-app input[type="text"],
  .v-app .v-slot > .v-caption,
  .v-app .v-gridlayout-slot > .v-caption,
  .v-app .v-has-caption > .v-caption,
  .v-app .v-formlayout-captioncell > .v-caption,
  .v-app .v-csslayout > .v-caption {
    -webkit-user-select: text;
    -moz-user-select: text;
    -ms-user-select: text;
    user-select: text; }
  .v-app input::-ms-clear {
    display: none; }

.v-ui {
  position: relative; }

.v-ui.v-ui-embedded {
  margin-top: -1px;
  border-top: 1px solid transparent; }

.v-ui:focus {
  outline: none; }

.v-overlay-container {
  width: 0;
  height: 0; }

.v-drag-element {
  z-index: 60000;
  position: absolute !important;
  cursor: default; }

.v-clip {
  overflow: hidden; }

.v-scrollable {
  overflow: auto; }
  .v-scrollable > .v-widget {
    vertical-align: middle;
    overflow: hidden; }

.v-ios.v-webkit .v-scrollable {
  -webkit-overflow-scrolling: touch; }

.v-ios5.v-webkit .v-scrollable {
  -webkit-overflow-scrolling: none; }

.v-webkit.v-ios .v-browserframe {
  -webkit-overflow-scrolling: touch;
  overflow: auto; }

.v-assistive-device-only {
  position: absolute;
  top: -2000px;
  left: -2000px;
  width: 10px;
  overflow: hidden; }

.v-icon {
  cursor: inherit;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none; }

.v-icon,
.v-errorindicator,
.v-required-field-indicator {
  display: inline-block;
  line-height: inherit; }

.v-caption {
  display: inline-block;
  white-space: nowrap;
  line-height: 1.55; }

.v-captiontext {
  display: inline-block;
  line-height: inherit; }

/**
 * The main Valo theme mixin, which outputs all the selectors and properties to produce 
 * the variation specified by global variables. Should not be included multiple times 
 * per compilation.
 */
.heroes.valo .v-app,
.heroes.valo .v-app-loading {
  font: 300 16px/1.55 "Helvetica Neue", arial, sans-serif;
  color: #474747;
  background-color: white;
  cursor: default; }
.heroes.valo .v-app-loading {
  width: 100%;
  background: white; }
  .heroes.valo .v-app-loading:before {
    content: "";
    position: fixed;
    z-index: 100;
    top: 45%;
    left: 50%;
    width: 28px;
    height: 28px;
    padding: 9px;
    margin-top: -24px;
    margin-left: -24px;
    background: #fff url(fonts/img/spinner.gif) no-repeat 50%;
    border-radius: 4px; }
.heroes.valo .v-loading-indicator {
  position: fixed !important;
  z-index: 99999;
  left: 0;
  right: auto;
  top: 0;
  width: 50%;
  opacity: 1;
  height: 4px;
  background-color: #197fe6;
  pointer-events: none;
  -webkit-transition: none;
  -moz-transition: none;
  transition: none;
  -webkit-animation: v-progress-start 1000ms 200ms both;
  -moz-animation: v-progress-start 1000ms 200ms both;
  animation: v-progress-start 1000ms 200ms both; }
  .heroes.valo .v-loading-indicator[style*="none"] {
    display: block !important;
    width: 100% !important;
    opacity: 0;
    -webkit-animation: none;
    -moz-animation: none;
    animation: none;
    -webkit-transition: opacity 500ms 300ms, width 300ms;
    -moz-transition: opacity 500ms 300ms, width 300ms;
    transition: opacity 500ms 300ms, width 300ms; }
.heroes.valo .v-loading-indicator-delay {
  width: 90%;
  -webkit-animation: v-progress-delay 3.8s forwards;
  -moz-animation: v-progress-delay 3.8s forwards;
  animation: v-progress-delay 3.8s forwards; }
  .v-ff .heroes.valo .v-loading-indicator-delay {
    width: 50%; }
.heroes.valo .v-loading-indicator-wait {
  width: 96%;
  -webkit-animation: v-progress-wait 5s forwards, v-progress-wait-pulse 1s 4s infinite backwards;
  -moz-animation: v-progress-wait 5s forwards, v-progress-wait-pulse 1s 4s infinite backwards;
  animation: v-progress-wait 5s forwards, v-progress-wait-pulse 1s 4s infinite backwards; }
  .v-ff .heroes.valo .v-loading-indicator-wait {
    width: 90%; }
.v-ie8 .heroes.valo .v-loading-indicator,
.v-ie8 .heroes.valo .v-loading-indicator-delay,
.v-ie8 .heroes.valo .v-loading-indicator-wait, .v-ie9 .heroes.valo .v-loading-indicator,
.v-ie9 .heroes.valo .v-loading-indicator-delay,
.v-ie9 .heroes.valo .v-loading-indicator-wait {
  width: 28px !important;
  height: 28px;
  padding: 9px;
  background: #fff url(fonts/img/spinner.gif) no-repeat 50%;
  border-radius: 4px;
  top: 9px;
  right: 9px;
  left: auto;
  filter: alpha(opacity=50); }
  .v-ie8 .heroes.valo .v-loading-indicator[style*="none"],
  .v-ie8 .heroes.valo .v-loading-indicator-delay[style*="none"],
  .v-ie8 .heroes.valo .v-loading-indicator-wait[style*="none"], .v-ie9 .heroes.valo .v-loading-indicator[style*="none"],
  .v-ie9 .heroes.valo .v-loading-indicator-delay[style*="none"],
  .v-ie9 .heroes.valo .v-loading-indicator-wait[style*="none"] {
    display: none !important; }
.v-ie8 .heroes.valo .v-loading-indicator-wait, .v-ie9 .heroes.valo .v-loading-indicator-wait {
  filter: alpha(opacity=100); }
.heroes.valo .v-scrollable:focus {
  outline: none; }
.heroes.valo img.v-icon {
  vertical-align: middle; }
.heroes.valo .v-caption {
  font-size: 14px;
  font-weight: 400;
  padding-bottom: .3em;
  padding-left: 1px; }
.heroes.valo .v-caption-on-left .v-caption,
.heroes.valo .v-caption-on-right .v-caption {
  padding-top: 0;
  padding-bottom: 0; }
.heroes.valo .v-icon + .v-captiontext,
.heroes.valo .v-icon + span {
  margin-left: 7px; }
  .heroes.valo .v-icon + .v-captiontext:empty,
  .heroes.valo .v-icon + span:empty {
    margin-left: 0; }
.heroes.valo .v-errorindicator {
  color: #ed473b;
  font-weight: 600;
  width: 19px;
  text-align: center; }
  .heroes.valo .v-errorindicator:before {
    content: "!"; }
.heroes.valo .v-required-field-indicator {
  color: #ed473b;
  padding: 0 .2em; }
.heroes.valo select {
  font: inherit;
  font-weight: 400;
  line-height: inherit;
  padding: 5px;
  margin: 0;
  border-radius: 4px;
  border: 0;
  background: #fafafa;
  color: #464646; }
  .heroes.valo select:focus {
    outline: none;
    -webkit-box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5);
    box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5); }
.heroes.valo button {
  font: inherit;
  font-weight: 400;
  line-height: 1.55; }
.heroes.valo a {
  cursor: pointer;
  color: #197fe6;
  text-decoration: underline;
  font-weight: inherit;
  -webkit-transition: color 140ms;
  -moz-transition: color 140ms;
  transition: color 140ms; }
  .heroes.valo a:hover {
    color: #4799eb; }
  .heroes.valo a.v-disabled {
    opacity: 0.5;
    filter: alpha(opacity=50) ; }
.heroes.valo .v-disabled {
  cursor: default !important; }
.heroes.valo .v-drag-element {
  background: white;
  color: #474747;
  -webkit-box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  border-radius: 4px;
  overflow: hidden;
  opacity: 0.5;
  filter: alpha(opacity=50) ; }
.heroes.valo .v-tooltip {
  background-color: #323232;
  background-color: rgba(50, 50, 50, 0.9);
  -webkit-box-shadow: 0 2px 12px rgba(0, 0, 0, 0.2);
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.2);
  color: white;
  padding: 5px 9px;
  border-radius: 3px;
  max-width: 35em;
  overflow: hidden !important;
  font-size: 14px; }
  .heroes.valo .v-tooltip div[style*="width"] {
    width: auto !important; }
  .heroes.valo .v-tooltip .v-errormessage {
    background-color: white;
    background-color: #fff;
    color: #ed473b;
    margin: -5px -9px;
    padding: 5px 9px;
    max-height: 10em;
    overflow: auto;
    font-weight: 400; }
    .heroes.valo .v-tooltip .v-errormessage h2:only-child {
      font: inherit;
      line-height: inherit; }
  .heroes.valo .v-tooltip .v-tooltip-text {
    max-height: 10em;
    overflow: auto;
    margin-top: 10px; }
  .heroes.valo .v-tooltip .v-errormessage[aria-hidden="true"] + .v-tooltip-text {
    margin-top: 0; }
  .heroes.valo .v-tooltip h1,
  .heroes.valo .v-tooltip h2,
  .heroes.valo .v-tooltip h3,
  .heroes.valo .v-tooltip h4 {
    color: inherit; }
.heroes.valo .v-contextmenu {
  padding: 4px 4px;
  border-radius: 4px;
  background-color: white;
  color: #474747;
  -webkit-box-shadow: 0 4px 10px 0 rgba(0, 0, 0, 0.1), 0 3px 5px 0 rgba(0, 0, 0, 0.05), 0 0 0 0 rgba(0, 0, 0, 0.09098);
  box-shadow: 0 4px 10px 0 rgba(0, 0, 0, 0.1), 0 3px 5px 0 rgba(0, 0, 0, 0.05), 0 0 0 0 rgba(0, 0, 0, 0.09098);
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  backface-visibility: hidden;
  padding: 4px 4px; }
  .heroes.valo .v-contextmenu[class*="animate-in"] {
    -webkit-animation: valo-overlay-animate-in 120ms;
    -moz-animation: valo-overlay-animate-in 120ms;
    animation: valo-overlay-animate-in 120ms; }
  .heroes.valo .v-contextmenu[class*="animate-out"] {
    -webkit-animation: valo-animate-out-fade 120ms;
    -moz-animation: valo-animate-out-fade 120ms;
    animation: valo-animate-out-fade 120ms; }
  .heroes.valo .v-contextmenu table {
    border-spacing: 0; }
.heroes.valo .v-contextmenu .gwt-MenuItem {
  cursor: pointer;
  line-height: 27px;
  padding: 0 20px 0 10px;
  border-radius: 3px;
  font-weight: 400;
  white-space: nowrap;
  position: relative;
  display: block; }
  .heroes.valo .v-contextmenu .gwt-MenuItem:active:before {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: #0959aa;
    opacity: 0.15;
    filter: alpha(opacity=15) ;
    pointer-events: none;
    border-radius: inherit; }
  .heroes.valo .v-contextmenu .gwt-MenuItem .v-icon {
    max-height: 27px;
    margin-right: 5px;
    min-width: 1em; }
.heroes.valo .v-contextmenu .gwt-MenuItem-selected {
  background: #197fe6;
  color: #edf2f8;
  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.05); }
.heroes.valo .v-button {
  position: relative;
  text-align: center;
  white-space: nowrap;
  outline: none;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
  cursor: pointer;
  height: 37px;
  padding: 0 16px;
  color: #191919;
  font-weight: 400;
  border-radius: 4px;
  border: 0;
  background: #fafafa; }
  .heroes.valo .v-button:before {
    content: "";
    display: inline-block;
    width: 0;
    height: 100%;
    vertical-align: middle; }
  .heroes.valo .v-button > div {
    vertical-align: middle; }
  .v-sa .heroes.valo .v-button:before {
    height: 110%; }
  .v-ff .heroes.valo .v-button:before {
    height: 107%; }
  .v-ie .heroes.valo .v-button:before {
    margin-top: 4px; }
  .heroes.valo .v-button:after {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border-radius: inherit;
    -webkit-transition: box-shadow 180ms, border 180ms;
    -moz-transition: box-shadow 180ms, border 180ms;
    transition: box-shadow 180ms, border 180ms; }
  .heroes.valo .v-button:focus:after {
    -webkit-transition: none;
    -moz-transition: none;
    transition: none; }
  .heroes.valo .v-button.v-disabled {
    opacity: 0.5;
    filter: alpha(opacity=50) ; }
    .heroes.valo .v-button.v-disabled:after {
      display: none; }
  .heroes.valo .v-button:after {
    border: inherit;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0; }
  .heroes.valo .v-button:hover:after {
    background-color: rgba(186, 186, 186, 0.1); }
  .heroes.valo .v-button:focus:after {
    border-color: #197fe6;
    -webkit-box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5);
    box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5); }
  .heroes.valo .v-button:active:after {
    background-color: rgba(125, 125, 125, 0.2); }
.heroes.valo .v-button-primary {
  height: 37px;
  padding: 0 16px;
  color: #edf2f8;
  font-weight: 400;
  border-radius: 4px;
  border: 0;
  background: #197fe6;
  padding: 0 19px;
  font-weight: bold;
  min-width: 81px; }
  .heroes.valo .v-button-primary:after {
    border: inherit;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0; }
  .heroes.valo .v-button-primary:hover:after {
    background-color: rgba(94, 166, 237, 0.1); }
  .heroes.valo .v-button-primary:focus:after {
    border: inherit;
    -webkit-box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5);
    box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5); }
  .heroes.valo .v-button-primary:active:after {
    background-color: rgba(3, 64, 125, 0.2); }
  .v-ie8 .heroes.valo .v-button-primary {
    min-width: 43px; }
.heroes.valo .v-button-friendly {
  height: 37px;
  padding: 0 16px;
  color: #eaf4e9;
  font-weight: 400;
  border-radius: 4px;
  border: 0;
  background: #2c9720; }
  .heroes.valo .v-button-friendly:after {
    border: inherit;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0; }
  .heroes.valo .v-button-friendly:hover:after {
    background-color: rgba(65, 211, 48, 0.1); }
  .heroes.valo .v-button-friendly:focus:after {
    border: inherit;
    -webkit-box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5);
    box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5); }
  .heroes.valo .v-button-friendly:active:after {
    background-color: rgba(14, 86, 6, 0.2); }
.heroes.valo .v-button-danger {
  height: 37px;
  padding: 0 16px;
  color: #f9f0ef;
  font-weight: 400;
  border-radius: 4px;
  border: 0;
  background: #ed473b; }
  .heroes.valo .v-button-danger:after {
    border: inherit;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0; }
  .heroes.valo .v-button-danger:hover:after {
    background-color: rgba(243, 137, 129, 0.1); }
  .heroes.valo .v-button-danger:focus:after {
    border: inherit;
    -webkit-box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5);
    box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5); }
  .heroes.valo .v-button-danger:active:after {
    background-color: rgba(146, 12, 2, 0.2); }
.heroes.valo .v-button-borderless {
  border: none;
  -webkit-box-shadow: none;
  box-shadow: none;
  background: transparent;
  color: inherit; }
  .heroes.valo .v-button-borderless:hover:after {
    background: transparent; }
  .heroes.valo .v-button-borderless:active {
    opacity: 0.7;
    filter: alpha(opacity=70) ; }
    .heroes.valo .v-button-borderless:active:after {
      background: transparent; }
.heroes.valo .v-button-borderless-colored {
  border: none;
  -webkit-box-shadow: none;
  box-shadow: none;
  background: transparent;
  color: #197fe6; }
  .heroes.valo .v-button-borderless-colored:hover {
    color: #4799eb; }
    .heroes.valo .v-button-borderless-colored:hover:after {
      background: transparent; }
  .heroes.valo .v-button-borderless-colored:active {
    opacity: 0.7;
    filter: alpha(opacity=70) ; }
    .heroes.valo .v-button-borderless-colored:active:after {
      background: transparent; }
.heroes.valo .v-button-quiet {
  visibility: hidden; }
  .heroes.valo .v-button-quiet:focus, .heroes.valo .v-button-quiet:hover {
    visibility: visible; }
  .heroes.valo .v-button-quiet [class*="wrap"] {
    visibility: visible; }
  .heroes.valo .v-button-quiet [class*="caption"] {
    display: inline-block; }
.heroes.valo .v-button-link {
  border: none;
  -webkit-box-shadow: none;
  box-shadow: none;
  background: transparent;
  color: inherit;
  cursor: pointer;
  color: #197fe6;
  text-decoration: underline;
  font-weight: inherit;
  -webkit-transition: color 140ms;
  -moz-transition: color 140ms;
  transition: color 140ms; }
  .heroes.valo .v-button-link:hover:after {
    background: transparent; }
  .heroes.valo .v-button-link:active {
    opacity: 0.7;
    filter: alpha(opacity=70) ; }
    .heroes.valo .v-button-link:active:after {
      background: transparent; }
  .heroes.valo .v-button-link:hover {
    color: #4799eb; }
  .heroes.valo .v-button-link.v-disabled {
    opacity: 0.5;
    filter: alpha(opacity=50) ; }
.heroes.valo .v-button-tiny {
  height: 28px;
  padding: 0 13px;
  font-size: 12px;
  border-radius: 4px; }
  .heroes.valo .v-button-tiny:after {
    border: inherit;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0; }
.heroes.valo .v-button-small {
  height: 31px;
  padding: 0 14px;
  font-size: 14px;
  border-radius: 4px; }
  .heroes.valo .v-button-small:after {
    border: inherit;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0; }
.heroes.valo .v-button-large {
  height: 44px;
  padding: 0 19px;
  font-size: 20px;
  border-radius: 4px; }
  .heroes.valo .v-button-large:after {
    border: inherit;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0; }
.heroes.valo .v-button-huge {
  height: 59px;
  padding: 0 26px;
  font-size: 26px;
  border-radius: 4px; }
  .heroes.valo .v-button-huge:after {
    border: inherit;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0; }
.heroes.valo .v-button-icon-align-right [class*="wrap"] {
  display: inline-block; }
.heroes.valo .v-button-icon-align-right .v-icon {
  float: right;
  margin-left: 13px; }
  .heroes.valo .v-button-icon-align-right .v-icon + span:not(:empty) {
    margin-left: 0; }
.heroes.valo .v-button-icon-align-top {
  height: auto;
  padding-top: 5px;
  padding-bottom: 5px; }
  .heroes.valo .v-button-icon-align-top [class*="wrap"] {
    display: inline-block; }
  .heroes.valo .v-button-icon-align-top .v-icon {
    display: block; }
    .heroes.valo .v-button-icon-align-top .v-icon + span:not(:empty) {
      margin-top: 7px;
      margin-left: 0; }
.heroes.valo .v-button-icon-only {
  width: 37px;
  padding: 0; }
  .heroes.valo .v-button-icon-only.v-button-tiny {
    width: 28px; }
  .heroes.valo .v-button-icon-only.v-button-small {
    width: 31px; }
  .heroes.valo .v-button-icon-only.v-button-large {
    width: 44px; }
  .heroes.valo .v-button-icon-only.v-button-huge {
    width: 59px; }
  .heroes.valo .v-button-icon-only .v-button-caption {
    display: none; }
.heroes.valo .v-grid {
  position: relative; }
.heroes.valo .v-grid-scroller {
  position: absolute;
  z-index: 20;
  outline: none;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }
.heroes.valo .v-grid-scroller-horizontal {
  left: 0;
  right: 0;
  bottom: 0;
  overflow-y: hidden;
  -ms-overflow-y: hidden; }
.heroes.valo .v-grid-scroller-vertical {
  right: 0;
  top: 0;
  bottom: 0;
  overflow-x: hidden;
  -ms-overflow-x: hidden; }
.heroes.valo .v-grid-tablewrapper {
  position: absolute;
  overflow: hidden;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }
.heroes.valo .v-grid-tablewrapper > table {
  border-spacing: 0;
  table-layout: fixed;
  width: inherit; }
.heroes.valo .v-grid-header-deco,
.heroes.valo .v-grid-footer-deco {
  position: absolute;
  right: 0;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }
.heroes.valo .v-grid-horizontal-scrollbar-deco {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }
.heroes.valo .v-grid-header,
.heroes.valo .v-grid-body,
.heroes.valo .v-grid-footer {
  position: absolute;
  left: 0;
  width: inherit;
  z-index: 10; }
.heroes.valo .v-grid-header,
.heroes.valo .v-grid-header-deco {
  top: 0; }
.heroes.valo .v-grid-footer,
.heroes.valo .v-grid-footer-deco {
  bottom: 0; }
.heroes.valo .v-grid-body {
  z-index: 0;
  top: 0; }
  .heroes.valo .v-grid-body .v-grid-row {
    position: absolute;
    top: 0;
    left: 0; }
.heroes.valo .v-grid-row {
  display: block; }
  .v-ie8 .heroes.valo .v-grid-row, .v-ie9 .heroes.valo .v-grid-row {
    float: left;
    clear: left;
    margin-top: 0; }
  .heroes.valo .v-grid-row > td,
  .heroes.valo .v-grid-row > th {
    background-color: white; }
.heroes.valo .v-grid-row {
  width: inherit; }
.heroes.valo .v-grid-cell {
  display: block;
  float: left;
  padding: 2px;
  white-space: nowrap;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  overflow: hidden;
  font-size: 16px; }
.heroes.valo .v-grid-cell.frozen {
  position: relative;
  z-index: 1; }
.heroes.valo .v-grid {
  outline: none; }
.heroes.valo .v-grid-scroller-vertical,
.heroes.valo .v-grid-scroller-horizontal {
  border: none; }
.heroes.valo .v-grid-scroller-vertical {
  border-left: none; }
.heroes.valo .v-grid-scroller-horizontal {
  border-top: none; }
.heroes.valo .v-grid-tablewrapper {
  border: none; }
.heroes.valo .v-grid-cell {
  background-color: white;
  padding: 0 12px;
  line-height: 37px;
  text-overflow: ellipsis; }
  .heroes.valo .v-grid-cell > * {
    line-height: 1.55; }
  .heroes.valo .v-grid-cell.frozen {
    -webkit-box-shadow: 1px 0 2px rgba(0, 0, 0, 0.1);
    box-shadow: 1px 0 2px rgba(0, 0, 0, 0.1);
    border-right: none; }
.heroes.valo .v-grid-row > td {
  border-left: none;
  border-top: 1px solid #e1e1e1; }
  .heroes.valo .v-grid-row > td:first-child {
    border-left: none; }
.heroes.valo tbody > .v-grid-row:first-child > td {
  border-top: none; }
.heroes.valo .v-grid-row-stripe > td {
  background-color: #fff; }
.heroes.valo .v-grid-row-selected > td {
  background: #f0f0f0; }
.heroes.valo .v-grid-header th {
  position: relative;
  background-color: #fafafa;
  font-size: 14px;
  font-weight: inherit;
  border-left: none;
  border-bottom: none;
  text-align: left; }
  .heroes.valo .v-grid-header th:first-child {
    border-left: none; }
.heroes.valo .v-grid-header .sort-asc,
.heroes.valo .v-grid-header .sort-desc {
  padding-right: 29px; }
  .heroes.valo .v-grid-header .sort-asc:after,
  .heroes.valo .v-grid-header .sort-desc:after {
    font-family: FontAwesome, sans-serif;
    content: "" " " attr(sort-order);
    position: absolute;
    right: 12px;
    font-size: 12px; }
.heroes.valo .v-grid-header .sort-desc:after {
  content: "" " " attr(sort-order); }
.heroes.valo .v-grid-footer td {
  background-color: #fafafa;
  font-size: 14px;
  font-weight: inherit;
  border-left: none;
  border-top: none; }
  .heroes.valo .v-grid-footer td:first-child {
    border-left: none; }
.heroes.valo .v-grid-header-deco {
  border-top: none;
  border-right: none;
  background-color: #fafafa; }
.heroes.valo .v-grid-footer-deco {
  border-bottom: none;
  border-right: none;
  background-color: #fafafa; }
.heroes.valo .v-grid-horizontal-scrollbar-deco {
  background-color: #fafafa;
  border: none;
  border-top: none; }
.heroes.valo .v-grid-cell-focused {
  position: relative; }
  .heroes.valo .v-grid-cell-focused:before {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border: none;
    display: none;
    pointer-events: none; }
  .ie8 .heroes.valo .v-grid-cell-focused:before, .ie9 .heroes.valo .v-grid-cell-focused:before, .ie10 .heroes.valo .v-grid-cell-focused:before {
    content: url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPjwvc3ZnPg==); }
.heroes.valo .v-grid:focus .v-grid-cell-focused:before {
  display: block; }
.heroes.valo .v-grid.v-disabled:focus .v-grid-cell-focused:before {
  display: none; }
.heroes.valo .v-grid-editor {
  margin-top: -1px;
  position: absolute;
  overflow-y: visible;
  background: white;
  -webkit-box-shadow: 0 0 10px 1px rgba(0, 0, 0, 0.3);
  box-shadow: 0 0 10px 1px rgba(0, 0, 0, 0.3); }
  .heroes.valo .v-grid-editor > div {
    position: absolute;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    border-left: none; }
    .heroes.valo .v-grid-editor > div:first-child {
      border-left: none; }
    .heroes.valo .v-grid-editor > div .v-textfield,
    .heroes.valo .v-grid-editor > div .v-datefield,
    .heroes.valo .v-grid-editor > div .v-filterselect {
      min-width: 100%;
      max-width: 100%;
      min-height: 100%;
      max-height: 100%;
      border: none;
      border-radius: 0; }
    .heroes.valo .v-grid-editor > div .v-textfield-focus,
    .heroes.valo .v-grid-editor > div .v-filterselect-focus input {
      position: relative;
      z-index: 1; }
.heroes.valo .v-grid-editor-save,
.heroes.valo .v-grid-editor-cancel {
  position: absolute;
  width: auto !important;
  height: auto !important; }
.heroes.valo .v-grid {
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
  background-color: #fafafa; }
.heroes.valo .v-grid-header .v-grid-cell {
  background: #fafafa;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.05); }
.heroes.valo .v-grid-footer .v-grid-cell {
  background: #fafafa;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.05); }
.heroes.valo .v-grid-header-deco {
  background: #fafafa; }
.heroes.valo .v-grid-footer-deco,
.heroes.valo .v-grid-horizontal-scrollbar-deco {
  background: #fafafa; }
.heroes.valo .v-grid-row-selected > .v-grid-cell {
  background: #f0f0f0;
  color: #434343;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.05);
  border-color: gainsboro; }
.heroes.valo .v-grid-row-selected > .v-grid-cell-focused:before {
  border-color: #75b2f0; }
.heroes.valo .v-grid-editor-save,
.heroes.valo .v-grid-editor-cancel {
  position: relative;
  text-align: center;
  white-space: nowrap;
  outline: none;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
  cursor: pointer;
  height: 31px;
  padding: 0 14px;
  color: #191919;
  font-weight: 400;
  font-size: 14px;
  border-radius: 4px;
  border: 0;
  background: #fafafa; }
  .heroes.valo .v-grid-editor-save:before,
  .heroes.valo .v-grid-editor-cancel:before {
    content: "";
    display: inline-block;
    width: 0;
    height: 100%;
    vertical-align: middle; }
  .heroes.valo .v-grid-editor-save > div,
  .heroes.valo .v-grid-editor-cancel > div {
    vertical-align: middle; }
  .v-sa .heroes.valo .v-grid-editor-save:before, .v-sa
  .heroes.valo .v-grid-editor-cancel:before {
    height: 110%; }
  .v-ff .heroes.valo .v-grid-editor-save:before, .v-ff
  .heroes.valo .v-grid-editor-cancel:before {
    height: 107%; }
  .v-ie .heroes.valo .v-grid-editor-save:before, .v-ie
  .heroes.valo .v-grid-editor-cancel:before {
    margin-top: 4px; }
  .heroes.valo .v-grid-editor-save:after,
  .heroes.valo .v-grid-editor-cancel:after {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border-radius: inherit;
    -webkit-transition: box-shadow 180ms, border 180ms;
    -moz-transition: box-shadow 180ms, border 180ms;
    transition: box-shadow 180ms, border 180ms; }
  .heroes.valo .v-grid-editor-save:focus:after,
  .heroes.valo .v-grid-editor-cancel:focus:after {
    -webkit-transition: none;
    -moz-transition: none;
    transition: none; }
  .heroes.valo .v-grid-editor-save.v-disabled,
  .heroes.valo .v-grid-editor-cancel.v-disabled {
    opacity: 0.5;
    filter: alpha(opacity=50) ; }
    .heroes.valo .v-grid-editor-save.v-disabled:after,
    .heroes.valo .v-grid-editor-cancel.v-disabled:after {
      display: none; }
  .heroes.valo .v-grid-editor-save:after,
  .heroes.valo .v-grid-editor-cancel:after {
    border: inherit;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0; }
  .heroes.valo .v-grid-editor-save:hover:after,
  .heroes.valo .v-grid-editor-cancel:hover:after {
    background-color: rgba(186, 186, 186, 0.1); }
  .heroes.valo .v-grid-editor-save:focus:after,
  .heroes.valo .v-grid-editor-cancel:focus:after {
    border-color: #197fe6;
    -webkit-box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5);
    box-shadow: 0 0 0 2px rgba(25, 127, 230, 0.5); }
  .heroes.valo .v-grid-editor-save:active:after,
  .heroes.valo .v-grid-editor-cancel:active:after {
    background-color: rgba(125, 125, 125, 0.2); }
.heroes.valo .v-grid-scroller::-webkit-scrollbar {
  border: none; }
.heroes.valo .v-grid-scroller::-webkit-scrollbar-thumb {
  border-radius: 10px;
  border: 4px solid transparent;
  background: rgba(0, 0, 0, 0.3);
  -webkit-background-clip: content-box;
  background-clip: content-box; }
.heroes.valo .v-grid-scroller-vertical::-webkit-scrollbar-thumb {
  min-height: 30px; }
.heroes.valo .v-grid-scroller-horizontal::-webkit-scrollbar-thumb {
  min-width: 30px; }
.heroes.valo .v-label {
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text; }
.heroes.valo .v-label-undef-w {
  white-space: nowrap; }
.heroes.valo h1, .heroes.valo .v-label-h1,
.heroes.valo h2, .heroes.valo .v-label-h2,
.heroes.valo h3, .heroes.valo .v-label-h3 {
  line-height: 1.1;
  font-weight: 200;
  color: #141414; }
.heroes.valo h1, .heroes.valo .v-label-h1 {
  font-size: 2.4em;
  margin-top: 1.4em;
  margin-bottom: 1em;
  letter-spacing: -0.03em; }
.heroes.valo h2, .heroes.valo .v-label-h2 {
  font-size: 1.6em;
  margin-top: 1.6em;
  margin-bottom: 0.77em;
  letter-spacing: -0.02em; }
.heroes.valo h3, .heroes.valo .v-label-h3 {
  font-size: 1.2em;
  margin-top: 1.8em;
  margin-bottom: 0.77em;
  letter-spacing: 0; }
.heroes.valo h4, .heroes.valo .v-label-h4 {
  line-height: 1.1;
  font-weight: 500;
  font-size: 14px;
  color: #424242;
  text-transform: uppercase;
  letter-spacing: 0;
  margin-top: 2.4em;
  margin-bottom: 0.8em; }
.heroes.valo .v-csslayout > h1:first-child,
.heroes.valo .v-csslayout > h2:first-child,
.heroes.valo .v-csslayout > h3:first-child,
.heroes.valo .v-csslayout > h4
> .v-label-h1:first-child,
.heroes.valo .v-csslayout > .v-label-h2:first-child,
.heroes.valo .v-csslayout > .v-label-h3:first-child,
.heroes.valo .v-csslayout > .v-label-h4:first-child {
  margin-top: 16px; }
.heroes.valo .v-verticallayout > .v-slot:first-child h1, .heroes.valo .v-verticallayout > .v-slot:first-child .v-label-h1,
.heroes.valo .v-verticallayout > .v-slot:first-child h2, .heroes.valo .v-verticallayout > .v-slot:first-child .v-label-h2,
.heroes.valo .v-verticallayout > .v-slot:first-child h3, .heroes.valo .v-verticallayout > .v-slot:first-child .v-label-h3,
.heroes.valo .v-verticallayout > .v-slot:first-child h4, .heroes.valo .v-verticallayout > .v-slot:first-child .v-label-h4,
.heroes.valo .v-verticallayout > div > .v-slot:first-child h1,
.heroes.valo .v-verticallayout > div > .v-slot:first-child .v-label-h1,
.heroes.valo .v-verticallayout > div > .v-slot:first-child h2,
.heroes.valo .v-verticallayout > div > .v-slot:first-child .v-label-h2,
.heroes.valo .v-verticallayout > div > .v-slot:first-child h3,
.heroes.valo .v-verticallayout > div > .v-slot:first-child .v-label-h3,
.heroes.valo .v-verticallayout > div > .v-slot:first-child h4,
.heroes.valo .v-verticallayout > div > .v-slot:first-child .v-label-h4 {
  margin-top: 16px; }
.heroes.valo h1.no-margin, .heroes.valo .v-label-h1.no-margin,
.heroes.valo h2.no-margin, .heroes.valo .v-label-h2.no-margin,
.heroes.valo h3.no-margin, .heroes.valo .v-label-h3.no-margin,
.heroes.valo h4.no-margin, .heroes.valo .v-label-h4.no-margin {
  margin: 0 !important; }
.heroes.valo .v-label-colored {
  color: #197fe6; }
.heroes.valo .v-label-large {
  font-size: 20px; }
.heroes.valo .v-label-small {
  font-size: 14px; }
.heroes.valo .v-label-tiny {
  font-size: 12px; }
.heroes.valo .v-label-huge {
  font-size: 26px; }
.heroes.valo .v-label-bold {
  font-weight: 500; }
.heroes.valo .v-label-light {
  font-weight: 200;
  color: gray; }
.heroes.valo .v-label-align-right {
  text-align: right; }
.heroes.valo .v-label-align-center {
  text-align: center; }
.heroes.valo .v-label-spinner {
  height: 24px !important;
  width: 24px !important;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  border: 2px solid rgba(25, 127, 230, 0.2);
  border-top-color: #197fe6;
  border-right-color: #197fe6;
  border-radius: 100%;
  -webkit-animation: v-rotate-360 500ms infinite linear;
  -moz-animation: v-rotate-360 500ms infinite linear;
  animation: v-rotate-360 500ms infinite linear;
  pointer-events: none; }
  .v-ie8 .heroes.valo .v-label-spinner, .v-ie9 .heroes.valo .v-label-spinner {
    border: none;
    border-radius: 4px;
    background: #fff url(fonts/img/spinner.gif) no-repeat 50% 50%;
    background-size: 80%; }
  .v-ie8 .heroes.valo .v-label-spinner {
    min-width: 30px;
    min-height: 30px; }
.heroes.valo .v-label-success,
.heroes.valo .v-label-failure {
  background: white;
  color: #474747;
  border: 2px solid #2c9720;
  border-radius: 4px;
  padding: 7px 19px 7px 37px;
  font-weight: 400;
  font-size: 15px; }
  .heroes.valo .v-label-success:before,
  .heroes.valo .v-label-failure:before {
    font-family: FontAwesome;
    content: "\f00c";
    margin-right: .5em;
    margin-left: -19px;
    color: #2c9720; }
.heroes.valo .v-label-failure {
  border-color: #ed473b; }
  .heroes.valo .v-label-failure:before {
    content: "\f05e";
    color: #ed473b; }
.heroes.valo .v-grid-row-focused .v-grid-cell {
  background: #f8f8f8; }
.heroes.valo .v-grid-row-selected .v-grid-cell {
  background: #f0f0f0;
  font-weight: 400; }
.heroes.valo .v-grid-header .v-grid-cell {
  background: #fafafa;
  border-bottom: 1px solid #e1e1e1; }
